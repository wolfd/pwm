#
# Password Management Servlets (PWM)
# http://code.google.com/p/pwm/
#
# Copyright (c) 2006-2009 Novell, Inc.
# Copyright (c) 2009-2012 The PWM Project
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

#==
#== Configuration Editor UI Localization file.  This file should not be modified
#== by a site administrator.  Site specific configuration is stored in the
#== PwmConfiguration.xml file.
#==


#*******************************************************************************************#
#                                   General                                                 #
#*******************************************************************************************#
CATEGORY_LABEL_GENERAL=General
CATEGORY_DESCR_GENERAL=General settings for the PWM application.  Settings here control the functionality and behavior of the system.

LABEL_pwm.selfURL=PWM Site URL
DEFLT_pwm.selfURL=
DESCR_pwm.selfURL=The URL to this password servlet, as seen by users.  The value is used in email macros and other user facing communications.  Example: \
  <i>https://password.example.com/pwm</i>.  The URL should contain the context path (usually <i>/pwm</i>).  <br/><br/>If blank, the system will attempt to auto-detect \
  the URL, however some network configuration prevent PWM from accurately determining the URL.

LABEL_pwm.versionCheck.enable=Enable Version Checking
DEFLT_pwm.versionCheck.enable=true
DESCR_pwm.versionCheck.enable=Allow PWM to periodically check for new versions

LABEL_pwm.publishStats.enable=Enable Anonymous Statistics Publishing
DEFLT_pwm.publishStats.enable=true
DESCR_pwm.publishStats.enable=If true, PWM will periodically publish statics to the PWM project website.   The published statistics are:\
  <ul><li>Instance Name</li>\
  <li>Version/Build Information</li>\
  <li>Cummulative Statistics</li>\
  <li>Which settings are non default (but not the actual setting values</li>\
  </ul>Leaving this feature enabled helps PWM developers know which features are used by administrators and understand what\
  PWM is used for.

LABEL_pwm.publishStats.siteDescription=Site Description
DEFLT_pwm.publishStats.siteDescription=
DESCR_pwm.publishStats.siteDescription=If Anonymous statistics publishing is enabled, this optional site description is published along with \
  the otherwise anonymous statisics.  This can be an organization name, or other similar value.
REGEX_pwm.publishStats.siteDescription=^.{0,100}$

LABEL_pwm.forwardURL=Forward URL
DEFLT_pwm.forwardURL=
DESCR_pwm.forwardURL=After completing any activity which does not require a logout, the user will be forwarded to this url.\
 <br/><br/>\
 This setting can always be overridden for any given user session by adding a <i>forwardURL</i> \
 parameter to any HTTP request.  If blank, the user will be forward to the application menu.

LABEL_pwm.logoutURL=Logout URL
DEFLT_pwm.logoutURL=
DESCR_pwm.logoutURL=URL to redirect user to upon logout.  If the site is being accessed through a \
 web authentication gateway, the Logout URL should be set to the gateway's Logout URL. \
 If you are using a gateway and do not include the proper Logout URL here, then users will \
 almost certainly get authentication errors, intruder lockouts and other problems.  If things are working \
 properly then the user should see the gateway logout screen when logging out of PWM.\
 <br/><br/>\
 The Logout URL can be set to any desired relative or absolute URL.  At the time the user's \
 browser requests this url, the PWM session will have already been invalidated.\
 <br/><br/>\
 This setting can always be overridden for any given user session by adding a <i>logoutURL</i> \
 parameter to any HTTP request during the session.

LABEL_google.analytics.tracker=Google Analytics Code
DEFLT_google.analytics.tracker=
DESCR_google.analytics.tracker=Google tracking cookie code.  Used for Google Analytics.  See <a href="http://www.google.com/analytics/">\
  http://www.google.com/analytics/</a>.  If this setting is blank, this feature will be disabled.

LABEL_pwmInstanceName=PWM Instance Name
DEFLT_pwmInstanceName=
DESCR_pwmInstanceName=Name of PWM instance.  If blank a persistent, randomly generated value will be used.  Recommended value is blank.

LABEL_idleTimeoutSeconds=Idle Timeout Seconds
DEFLT_idleTimeoutSeconds=300
DESCR_idleTimeoutSeconds=Number of seconds after which an authenticated session becomes unauthenticated.

LABEL_network.reverseDNS.enable=Enable Reverse DNS
DEFLT_network.reverseDNS.enable=true
DESCR_network.reverseDNS.enable=If true, the system's reverse DNS system is used to record the hostname of the client.  In some cases \
  this can cause performance issues so it can be disabled if it is not required.

LABEL_knownLocales=Known Locales
DEFLT_knownLocales=["cs","de","es","fi","fr","iw","it","nl","pl","pt","sk","tr"]
DESCR_knownLocales=List of locales used.  These codes should correspond to standard browser location codes.


#*******************************************************************************************#
#                               Change Password                                             #
#*******************************************************************************************#
CATEGORY_LABEL_CHANGE_PASSWORD=Change Password
CATEGORY_DESCR_CHANGE_PASSWORD=

LABEL_password.change.requireCurrent=Require Current Password during change
DEFLT_password.change.requireCurrent=false
DESCR_password.change.requireCurrent=If true, the user's current password will be required on the change password page for most change \
  password scenarios.  In most cases this is not requried because the user just authenticated to pwm prior to the seeing the change password \
  page.

LABEL_logoutAfterPasswordChange=Logout After Password Change
DEFLT_logoutAfterPasswordChange=true
DESCR_logoutAfterPasswordChange=Force user to logout of PWM (and send to logoutURL) after a password change.\
 <br/><br/>\
 In most cases, this should be left on (default), especially if using \
 some type of single sign on service.

LABEL_display.password.changeAgreement=Password Change Agreement Message
DEFLT_display.password.changeAgreement={"":""}
DESCR_display.password.changeAgreement=<p>Message to display to user before being allowed to change password. \
  If blank, the change password agreement page will not be displayed to the user. \
  This message may include HTML tags.</p> \
  <p>This setting may use PWM Macros.  See the "View" menu "Show PWM Macro Help" for more information about PWM Macros.</p>

LABEL_passwordSyncMinWaitTime=Password Change Minimum Wait Time
DEFLT_passwordSyncMinWaitTime=15
DESCR_passwordSyncMinWaitTime=During a password change, PWM will wait for at least this amount of time before forwarding \
  the user. \
  <br/><br/>\
  Value is specified in seconds.

LABEL_passwordSyncMaxWaitTime=Password Change Maximum Wait Time
DEFLT_passwordSyncMaxWaitTime=90
DESCR_passwordSyncMaxWaitTime=During a password change, PWM will wait for the password to be synchronized to all \
  configured LDAP servers.  In cases where the synchronization may take an extraordinary amount of \
  time, this setting will prevent the page from timing out.\
  <br/><br/>\
  Value is specified in seconds.

LABEL_expirePreTime=Password Pre-Expire Time
DEFLT_expirePreTime=86400
DESCR_expirePreTime=Number of seconds before a user's password expires in which to force the user to change \
 their password.  If the user's password will expire within this time frame, PWM will behave \
 as if the user's password has already expired. \
 <br/><br/>\
 Setting this value to a day or so will prevent most cases of a user's password expiring \
 while they are logged in.  The recommend setting for this value is 86400 (1 day).

LABEL_expireWarnTime=Password ExpireWarn Time
DEFLT_expireWarnTime=432000
DESCR_expireWarnTime=Number of seconds before a user's password expires in which to warn the user to change \
 their password.  If the user's password will expire within this time frame, PWM will warn \
 the user during a CommandServlet checkExpire or checkAll operation. \
 <br/><br/>\
 If this time is zero or less than the expirePreTime, this feature will be disabled.  The recommended \
  setting for this value is 432000 (5 days).

LABEL_expireCheckDuringAuth=Check Expire During Authentication
DEFLT_expireCheckDuringAuth=true
DESCR_expireCheckDuringAuth=When the user is authenticated to PWM, should there be a check to see if the user's \
 password is expired (or about to expire based on the expirePreTime).  If this is set to \
 true, and the user's password is expired, they will be forced to the expire password page. \

LABEL_pwm.seedlist.location=Seedlist File
DEFLT_pwm.seedlist.location=seedlist.zip
DESCR_pwm.seedlist.location=PWM can generate "friendly" random password suggestions to users.  It does this by using \
 a "seed" word or words, and then modifying that word randomly until it is sufficiently \
 complex and meets the configured rules computed for the user.\
 <br/><br/>\
 Setting this to blank will result in suggested passwords being completely randomized.\

LABEL_changePassword.writeAttributes=Post Password Change Write Attributes
DEFLT_changePassword.writeAttributes=
DESCR_changePassword.writeAttributes=Attributes to be written to ldap when a user is created.  These attributes will be written \
 to the user object just after writing the password.\
 <br/><br/>\
 The format is name=value pair, multiple attributes can be specified by separating with a comma.  PwmMacros may be used.
REGEX_changePassword.writeAttributes=^[a-zA-Z][a-zA-Z0-9]+=.+$

#*******************************************************************************************#
#                               User Interface                                              #
#*******************************************************************************************#
CATEGORY_LABEL_USER_INTERFACE=User Interface
CATEGORY_DESCR_USER_INTERFACE=These settings control overall features and displays that are visible to the end user.

LABEL_interface.theme=Interface Theme
DEFLT_interface.theme=default
DESCR_interface.theme=Change the look and feel of PWM by selecting a theme.  Themes are provided to provide CSS customizers \
  inspiration.  If <b>Embedded</b> is selected, the settings <i>User Interface -> Embedded CSS Stylesheet</i> and <i>User Interface -> Embedded \
  Mobile CSS Stylesheet</i> will be used to manage the custom CSS tags.  If <b>Custom</b> is selected, the settings <i>User Interface -> \
  Custom CSS Location</i> and <i>Custom Mobile CSS Location</i>.
OPTS_interface.theme={"default":"Default", "autumn":"Autumn", "blue":"Blue", "matrix":"Matrix", "midnight":"Midnight", "red":"Red", "sterile":"Sterile", "tulips":"Tulips", "water":"Water", "custom":"Custom", "embed":"Embedded"}

LABEL_display.showDetailedErrors=Show Detailed Errors
DEFLT_display.showDetailedErrors=true
DESCR_display.showDetailedErrors=While useful for administrators, especially during configuration, showing detailed error \
  messages to users may be confusing as well as a security hazard.

LABEL_password.showAutoGen=Show Auto Generate Randoms
DEFLT_password.showAutoGen=true
DESCR_password.showAutoGen=If true, the user will see the auto-generate random password link on the change password screen.

LABEL_password.showStrengthMeter=Show Strength Meter
DEFLT_password.showStrengthMeter=true
DESCR_password.showStrengthMeter=If true, the user will see the password strength meter on the change password screen.

LABEL_display.password.guideText=Password Guide Text
DEFLT_display.password.guideText={"":""}
DESCR_display.password.guideText=<p>Text (with HTML tags/formatting) to show user on password guide page.  This will show up \
  as a "password guide" link and pop-up dialog.  Leave blank to not show the password guide link.</p>\
  <p>This setting may use PWM Macros.  See the "View" menu "Show PWM Macro Help" for more information about PWM Macros.</p>

LABEL_display.showHidePasswordFields=Allow Show/Hide Password Fields
DEFLT_display.showHidePasswordFields=true
DESCR_display.showHidePasswordFields=Where available, allow the user to toggle the show/hide password field \
  option.

LABEL_display.showCancelButton=Show Cancel Button
DEFLT_display.showCancelButton=true
DESCR_display.showCancelButton=Where appropriate, show a "Cancel" button to user.  Pressing the cancel button will \
  send the user to the forwardURL (or logoutURL if the password has been modified).  The cancel button will show on \
  the change password screen only if the password is not expired.  The Cancel button will only show up if the browser \
  has javaScript enabled.

LABEL_display.showResetButton=Show Reset Button
DEFLT_display.showResetButton=true
DESCR_display.showResetButton=Where appropriate, show a "Reset" button to user.  Pressing the reset button will \
  clear the form field values to their original values.

LABEL_display.showSuccessPage=Show Success Pages
DEFLT_display.showSuccessPage=true
DESCR_display.showSuccessPage=When an activity completes successfully, PWM will normally show a "success" page to the user \
  informing the user the action is completed.  This page can be bypassed by changing this setting to false.

LABEL_display.passwordHistory=Show Password History
DEFLT_display.passwordHistory=true
DESCR_display.passwordHistory=Show Password History menu on main menu.

LABEL_display.accountInformation=Show User Account Information
DEFLT_display.accountInformation=true
DESCR_display.accountInformation=Show User Account Information menu on main menu.

LABEL_display.showLoginPageOptions=Show Login Page Options
DEFLT_display.showLoginPageOptions=true
DESCR_display.showLoginPageOptions=If true, the login page will display the "Forgotten Password" and other options (if \
  those components are enabled).

LABEL_display.css.customStyle=Embedded CSS Stylesheet
DEFLT_display.css.customStyle=
DESCR_display.css.customStyle=Contents of the custom CSS Stylesheet.  The setting <i>User Interface -> Theme</i> must be set to Embed \
  for this setting to be useful.  The contents of this setting will be served from the url of <b>/resources/themes/embed/pwmStyle.css</b>.

LABEL_display.css.customMobileStyle=Embedded Mobile CSS Stylesheet
DEFLT_display.css.customMobileStyle=
DESCR_display.css.customMobileStyle=Contents of the custom mobile CSS Stylesheet.  The setting <i>User Interface -> Theme</i> must be set to Embed \
  for this setting to be useful.  The contents of this setting will be served from the url of <b>/resources/themes/embed/pwmMobileStyle.css</b>.

LABEL_display.css.customStyleLocation=Custom CSS Stylesheet Location.
DEFLT_display.css.customStyleLocation=/resources/custom/pwmStyle.css
DESCR_display.css.customStyleLocation=URL Location (and name) of the pwmStyle.css.  The setting <i>User Interface -> Theme</i> must be set to Embed \
  for this setting for this setting to be useful.  If this URL is relative, it will be appended to the context path.

LABEL_display.css.customMobileStyleLocation=Custom CSS Stylesheet Location
DEFLT_display.css.customMobileStyleLocation=/resources/custom/pwmStyleMobile.css
DESCR_display.css.customMobileStyleLocation=URL Location (and name) of the pwmMobileStyle.css.  The setting <i>User Interface -> Theme</i> must be set to Embed \
  for this setting for this setting to be useful.  If this URL is relative, it will be appended to the context path.

LABEL_display.js.custom=Embedded JavaScript
DEFLT_display.js.custom=
DESCR_display.js.custom=Contents of this setting will be injected into all PWM pages inside a <script></script> html tag near the bottom of the page.



#*******************************************************************************************#
#                                      LDAP                                                 #
#*******************************************************************************************#
CATEGORY_LABEL_LDAP=LDAP Directory
CATEGORY_DESCR_LDAP=Settings that control PWM's interaction with an LDAP directory.  PWM will auto-detect \
  the LDAP directory vendor and type.  Vendor specific settings have their own category.

LABEL_ldap.serverUrls=LDAP URLs
DEFLT_ldap.serverUrls=["ldaps:\/\/ldap.example.com:636"]
DESCR_ldap.serverUrls=List of ldap servers in URL format.  PWM will use these servers in a \
 fail-over configuration.  The servers are used in order of appearance in this list.  If the first server \
 is unavailable PWM will use the next available server in the list.  PWM will \
 then periodically fall-back to the first server to see if it has become available.\
 <ul><li>For secure SSL, use the "<i>ldaps://servername:636</i>" format</li>\
 <li>For plain-text servers, use "<i>ldap://serverame:389</i>" format (not recommended)</li></ul>\
 <p>When using secure connections, the Java virtual machine running PWM must trust the directory server, \
 either because it has a valid commercial certificate, or because you have \
 manually added the public key certificate from the tree to the Java keystore.</p> \
 \
 <p><b>WARNING</b>: Avoid using non-secure connections for all but the most basic testing purposes.  Many \
  LDAP servers will reject password operations on non-secure connections.</p>\
  <ul><li>Avoid using a virtual IP address (vip) or load balancer device whenever possible.</li>\
  <li>Do not use a DNS round-robin address</li>\
  </ul>


REGEX_ldap.serverUrls=^(ldap|ldaps)://[a-zA-Z0-9.-]+:[0-9]+$

LABEL_ldap.proxy.username=LDAP Proxy User
DEFLT_ldap.proxy.username=cn=admin,o=example
DEFLT-AD_ldap.proxy.username=cn=administrator,cn=users,dc=site,dc=example,dc=net
DEFLT-ADDB_ldap.proxy.username=cn=administrator,cn=users,dc=site,dc=example,dc=net
DESCR_ldap.proxy.username=LDAP Proxy User used by PWM to access the ldap directory. \
 This user must have rights to browse users, and manage password attributes on \
 the user object.\
  <br/><br/>\
  This value should be in LDAP distinguished name format, even if your ldap directory accepts other \
  types of values for the bind DN.  An example of this format is <i>cn=admin,o=example</i> or <i>cn=administrator,cn=users,dc=subdomain,dc=domain,dc=net</i>.\
 <br/><br/>\
 Generally, the proxy user needs read/browse object rights to all user objects \
 it will manage, as well as create object rights in the new user container (if \
 enabled).

LABEL_ldap.proxy.password=LDAP Proxy Password
DEFLT_ldap.proxy.password=password
DESCR_ldap.proxy.password=The corresponding password of LDAP Proxy User user.

LABEL_ldap.testuser.username=LDAP Test User
DEFLT_ldap.testuser.username=
DESCR_ldap.testuser.username=The LDAP test user is used by PWM to test functionality and access to the ldap directory. \
 This user should be configured similar to a normal user account with normal access privileges. \
 PWM will periodically use this account to perform a health check, including changing the password of the account. \
  <br/><br/>\
 <b>Using a test user account will greatly increase the ability of PWM to detect and alert configuration and health issues.</b>\
  <br/><br/>\
  The following functionality (if enabled) will be tested using the test user account.\
  <ul><li>Authentication</li>\
  <li>Password policy reading</li>\
  <li>Set password</li>\
  <li>Set challenge/responses</li>\
  <li>Load challenge/responses</li></ul>

LABEL_ldap.idleTimeout=LDAP Idle Timeout
DEFLT_ldap.idleTimeout=0
DESCR_ldap.idleTimeout=Amount of seconds the LDAP connection for a given session can remain idle before closing. \
  If zero, then an ldap connection will be maintained throughout the lifetime of the http session.

LABEL_ldap.promiscuousSSL=LDAP Promiscuous SSL
DEFLT_ldap.promiscuousSSL=false
DESCR_ldap.promiscuousSSL=If true PWM will trust any LDAP SSL certificate without any verification.  Thus, with \
  this setting set to true, it is not required to import the LDAP server's SSL certificate into the Java keystore.\
  <br/><br/>\
  <b>WARNING:</b> using promiscuous SSL is a security risk and should never be used in a production system.\

LABEL_ldap.rootContexts=LDAP Contextless Login Root
DEFLT_ldap.rootContexts=ou=users,o=example
DEFLT-AD_ldap.rootContexts=cn=users,dc=site,dc=example,dc=net
DEFLT-ADDB_ldap.rootContexts=cn=users,dc=site,dc=example,dc=net
DESCR_ldap.rootContexts=Base context to search for usernames during login

LABEL_ldap.selectableContexts=Login Contexts
DEFLT_ldap.selectableContexts=[""]
DESCR_ldap.selectableContexts=This optional setting, if configured, will add another field to the form-based PWM \
 login screen.  The field will allow the user to select a specific context \
 used during login.  This allows PWM to be used against ldap directories that do not \
 have unique usernames throughout the entire directory. \
 <br/><br/>\
 Values can further be set with both a display value and a context, separated by three colons.\
 <br/><br/>\
 For example:\
 <p>\
  <b>ou=sf,ou=ca,o=example:::San Francisco</b><br/\
  <b>ou=lon,ou=uk,o=example:::London</b><br/\
  <b>ou=nyc,ou=ny,o=example:::New York</b><br/\
 </p>
REGEX_ldap.selectableContexts=^.+:::.+$

LABEL_pwmAdmin.queryMatch=PWM Admin Query String
DEFLT_pwmAdmin.queryMatch=(groupMembership=cn=PwmAdmins,ou=Groups,o=example)
DEFLT-AD_pwmAdmin.queryMatch=(memberOf=CN=Administrators,CN=Builtin,DC=site,DC=example,DC=net)
DEFLT-ADDB_pwmAdmin.queryMatch=(memberOf=CN=Administrators,CN=Builtin,DC=site,DC=example,DC=net)
DESCR_pwmAdmin.queryMatch=Query string used to detect if a user is a pwmAdministrator.  An LDAP query is performed \
 during pwm login against the logged in user to determine if the user is a pwm Admin.  If \
 the user matches the query, then the user is considered a PWM administrator.

LABEL_ldap.usernameSearchFilter=Username search filter
DEFLT_ldap.usernameSearchFilter=(&(objectClass=person)(cn=%USERNAME%))
DEFLT-AD_ldap.usernameSearchFilter=(&(objectClass=person)(|(samAccountName=%USERNAME%)(cn=%USERNAME%)(mail=%USERNAME%)))
DEFLT-ADDB_ldap.usernameSearchFilter=(&(objectClass=person)(|(samAccountName=%USERNAME%)(cn=%USERNAME%)(mail=%USERNAME%)))
DESCR_ldap.usernameSearchFilter=Used to for contextless login and other functions to find \
 users in ldap using usernames.  The value <i>%USERNAME%</i> is replaced with the \
 actual username value.

LABEL_ldap.readPasswordPolicies=Read Password Policies
DEFLT_ldap.readPasswordPolicies=true
DESCR_ldap.readPasswordPolicies=If this setting is true, PWM will attempt to read the password policy \
 for the user from the ldap directory.  Support for this functionality varies based on directory vendor and directory configuration settings. \
  <br/><br/>After successfully reading a user password policy, PWM will merge the PWM configured policy and the user policy and apply the most \
  restrictive value for each setting.\

LABEL_ldap.addObjectClasses=Auto Add Object Classes
DEFLT_ldap.addObjectClasses=["pwmUser"]
DEFLT-ADDB_ldap.addObjectClasses=[]
DESCR_ldap.addObjectClasses=Object classes to automatically add to users who authenticate to the password \
 servlet.  Typically this is the standard pwmUser aux class.  The definition for this \
 class is in the supplied pwmSchema.ldif file.
REGEX_ldap.addObjectClasses=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_password.allowChange.queryMatch=Change Password Query Match
DEFLT_password.allowChange.queryMatch=(objectClass=*)
DESCR_password.allowChange.queryMatch=Query string used to detect if a user is a permitted to change password.  The user must be \
 returned during this is ldap query or else the user will not be permitted to change the password.

LABEL_ldap.namingAttribute=LDAP Naming Attribute
DEFLT_ldap.namingAttribute=cn
DESCR_ldap.namingAttribute=Attribute name used as the naming attribute on ldap user entries. This value is also the \
  first part of the distinguished name of a user.  This name is constant depending on directory vendor type, even if a different \
  attribute is used for the login search filter.  Typically the naming attribute is <i>cn</i> or <i>uid</i>.
REGEX_ldap.namingAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_passwordLastUpdateAttribute=Last Password Update Attribute
DEFLT_passwordLastUpdateAttribute=pwmLastPwdUpdate
DEFLT-ADDB_passwordLastUpdateAttribute=
DESCR_passwordLastUpdateAttribute=This attribute is used to mark when the password is updated, and is used during \
 replication checks, and other processes.
REGEX_passwordLastUpdateAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_ldap.guidAttribute=LDAP GUID Attribute
DEFLT_ldap.guidAttribute=VENDORGUID
DESCR_ldap.guidAttribute=This attribute is used by PWM to identity and reference unique users in the LDAP directory.  If set \
  to the default value of <i>VENDORGUID</i>, PWM will attempt to read the vendor specific ldap GUID.  Alternatively, you can set \
  any string readable attribute as the GUID as long as PWM can trust the directory to enforce the uniqueness.  Lastly, you can use \
  a custom attribute such as the pwmGUID attribute, and configure the "Auto-Add GUID Value" option to true.
REGEX_ldap.guidAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_ldap.guid.autoAddValue=Auto-Add GUID Value
DEFLT_ldap.guid.autoAddValue=false
DESCR_ldap.guid.autoAddValue=If true, PWM will attempt to add a unique GUID value for any user attempting to authenticate \
  that does not have a value.

LABEL_ldap.wireTrace.enable=Enable LDAP Wire Trace
DEFLT_ldap.wireTrace.enable=false
DESCR_ldap.wireTrace.enable=If true, PWM will enable logging of all ldap read/write values to the TRACE logging level.

LABEL_ldap.alwaysUseProxy=Always use proxy
DEFLT_ldap.alwaysUseProxy=false
DESCR_ldap.alwaysUseProxy=Always use proxy user account for ldap connections.  If true, PWM will only ever bind to \
 the LDAP directory using the proxy username and password.  When set to true: \
 <ul><li>Authentication will be performed using ldap compare operation instead of bind</li>\
 <li>All read/write operations will require permission of the proxy user</li>\
 <li>Security is managed exclusively by PWM, any defects or "security holes" in pwm would \
 result in an exploitable security breach</li>\
 <li>Password change operations are performed using the proxy user connection</li>\
 <li>User grace logins will not be decremented</li></ul>\
 The default setting is false.  You should carefully consider the security impacts before setting this to true.

LABEL_ldap.username.attr=Attribute to use for "Username" field.
DEFLT_ldap.username.attr=
DEFLT-AD_ldap.username.attr=sAMaccountName
DEFLT-ADDB_ldap.username.attr=sAMaccountName
DESCR_ldap.username.attr=If blank, the LDAP Naming Attribute will be used.  This configuration option \
  allows screens that display the "Username" of a user to show something other then the LDAP Naming Attribute \
  if appropriate.


#*******************************************************************************************#
#                                        Email                                              #
#*******************************************************************************************#
CATEGORY_LABEL_EMAIL=Email
CATEGORY_DESCR_EMAIL=<p>Configuration settings for all PWM sent emails.   For email body configuration, \
  both plaintext and HTML settings are provided.  It is encouraged that for each configured setting \
  and locale, both plaintext and (if desired) HTML email bodies are configured.  PWM will deliver the \
  email body in both formats and the email client can choose which to display.</p> \
  <p>The body (plaintext or HTML), subject and from values of emails may use PWM Macros.  See the "View" menu "Show PWM Macro Help" for more information about \
  PWM Macros.</p>

LABEL_email.smtp.address=SMTP Email Server Address
DEFLT_email.smtp.address=
DESCR_email.smtp.address=Any emails generated by PWM will be sent via this server.  \
 Removing this setting will prevent PWM from sending any email at all.  \
 Be sure the server listed here allows relaying.  For best results, use a local smtp server.
REGEX_email.smtp.address=^[a-zA-Z0-9.-]*$

LABEL_email.smtp.username=SMTP Email Server Username
DEFLT_email.smtp.username=
DESCR_email.smtp.username=Any emails generated by PWM will be sent by logging into server with this user.  \
 A blank value will here will send SMTP messages without authentication.

LABEL_email.smtp.userpassword=SMTP Email Server Password
DEFLT_email.smtp.userpassword=
DESCR_email.smtp.userpassword=Any emails generated by PWM will be sent by logging into server with this password.  \
 A blank value will here will send SMTP messages without authentication.

LABEL_email.userMailAttribute=User Email attribute
DEFLT_email.userMailAttribute=mail
DESCR_email.userMailAttribute=User LDAP attribute containing the user's email address.
REGEX_email.userMailAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_email.queueMaxAge=Maximum Email Queue Age
DEFLT_email.queueMaxAge=3600
DESCR_email.queueMaxAge=Maximum age (in seconds) an email can wait in the send queue.  If an email is in the send \
  queue longer than this time, it will be discarded.  Emails only persist in the send queue if there is \
  an IO or network error to the smtp server while sending the email.

LABEL_email.adminAlert.toAddress=Admin Alert To Address
DEFLT_email.adminAlert.toAddress=["admin@example.com"]
DESCR_email.adminAlert.toAddress=During certain events, PWM will send email notifications \
 such events include things like intruder lockout events, or ldap server unavailability \
 Leave this setting blank to disable the alerts.

LABEL_email.adminAlert.fromAddress=Admin Alert From Address
DEFLT_email.adminAlert.fromAddress=PWM Alert Notification <noreply@@PWM:SiteHost@>
DESCR_email.adminAlert.fromAddress=Admin alert "From" email address.

LABEL_email.changePassword.from=Change Password Email From
DEFLT_email.changePassword.from={"":"Change Password Notice <noreply@@PWM:SiteHost@>"}
DESCR_email.changePassword.from=From address of email sent to users when a password change occurs.

LABEL_email.changePassword.subject=Change Password Email Subject
DEFLT_email.changePassword.subject={"":"Password Change Notification"}
DESCR_email.changePassword.subject=Subject of email sent to users when a password change occurs.

LABEL_email.changePassword.plainBody=Change Password Plaintext Email Body
DEFLT_email.changePassword.plainBody={"":"Your password has been changed.  If you have changed your password, then no action is required.  If you did not initiate a password change please contact your help desk."}
DESCR_email.changePassword.plainBody=Body of email to send to users when a password change occurs.

LABEL_email.changePassword.htmlBody=Change Password HTML Email Body
DEFLT_email.changePassword.htmlBody={"":"<b>Your password has been changed.<\/b>  If you have changed your password, then no action is required.  If you did not initiate a password change please contact your help desk."}
DESCR_email.changePassword.htmlBody=Body of email to send to users when a password change occurs.

LABEL_email.newUser.subject=New User Email Subject
DEFLT_email.newUser.subject={"":"Welcome"}
DESCR_email.newUser.subject=Subject of email sent to newly created users.

LABEL_email.newUser.from=New User Email From
DEFLT_email.newUser.from={"":"New User Registration <noreply@@PWM:SiteHost@>"}
DESCR_email.newUser.from=From address of email sent to newly created users.

LABEL_email.newUser.plainBody=New User Plaintext Email Body
DEFLT_email.newUser.plainBody={"":"Thank you for registering."}
DESCR_email.newUser.plainBody=Body of email sent to newly created users.

LABEL_email.newUser.htmlBody=New User HTML Email Body
DEFLT_email.newUser.htmlBody={"":"<b>Thank you for registering your account.<\/b>"}
DESCR_email.newUser.htmlBody=Body of email sent to newly created users.

LABEL_email.newUser.token.subject=New User Verification Subject
DEFLT_email.newUser.token.subject={"":"New User Verification"}
DESCR_email.newUser.token.subject=Subject of email sent during new user verification process.

LABEL_email.newUser.token.from=New User Verification From
DEFLT_email.newUser.token.from={"":"New User Verification <noreply@@PWM:SiteHost@>"}
DESCR_email.newUser.token.from=From address of email sent during new user verification process.

LABEL_email.newUser.token.plainBody=New User Verification Plaintext Email Body
DEFLT_email.newUser.token.plainBody={"":"Your activation token is %TOKEN%."}
DESCR_email.newUser.token.plainBody=Body of email sent during new user verification process.

LABEL_email.newUser.token.htmlBody=New User Verification HTML Email Body
DEFLT_email.newUser.token.htmlBody={"":"Thank you for requesting a new account.<br/><br/>To continue with your account registration, please <a href=\\"@PWM:SiteURL@/public/NewUser/%TOKEN%\\">click here</a> to continue.<br/><br/>Alternatively, you can enter the code:<br/><br/><b>%TOKEN%</b><br/><br/>to continue.If you did not request to create a new account, you do not need to take any action."}
DESCR_email.newUser.token.htmlBody=Body of email sent during new user verification process.

LABEL_email.guest.subject=New Guest Email Subject
DEFLT_email.guest.subject={"":"Welcome"}
DESCR_email.guest.subject=Subject of email sent to newly created guest users.

LABEL_email.guest.from=New Guest Email From
DEFLT_email.guest.from={"":"Password Notification Agent <noreply@@PWM:SiteHost@>"}
DESCR_email.guest.from=From address of email sent to newly created guest users.

LABEL_email.guest.plainBody=New Guest Plaintext Email Body
DEFLT_email.guest.plainBody={"":"Your account has been created.\nYour username is: %cn%\nYour password is: %password%"}
DESCR_email.guest.plainBody=Body of email sent to newly created guest users.

LABEL_email.guest.htmlBody=New Guest User HTML Email Body
DEFLT_email.guest.htmlBody={"":"<b>Your account has been created.<\/b><p>Your username is: <b>%cn%<\/b><br>Your password is: <b>%password%<\/b><\/p>"}
DESCR_email.guest.htmlBody=Body of email sent to newly created guest users.

LABEL_email.updateguest.subject=Update Guest Email Subject
DEFLT_email.updateguest.subject={"":"Account update notification"}
DESCR_email.updateguest.subject=Subject of email sent to updated guest users.

LABEL_email.updateguest.from=Update Guest Email From
DEFLT_email.updateguest.from={"":"Password Notification Agent <noreply@@PWM:SiteHost@>"}
DESCR_email.updateguest.from=From address of email sent to updated guest users.

LABEL_email.updateguest.plainBody=Updated Guest Plaintext Email Body
DEFLT_email.updateguest.plainBody={"":"Your account has been updated."}
DESCR_email.updateguest.plainBody=Body of email sent to newly updated guest users.

LABEL_email.updateguest.htmlBody=New Guest User HTML Email Body
DEFLT_email.updateguest.htmlBody={"":"<b>Your account has been created.<\/b>"}
DESCR_email.updateguest.htmlBody=Body of email sent to newly created guest users.

LABEL_email.activation.subject=Activation Email Subject
DEFLT_email.activation.subject={"":"Account Activated"}
DESCR_email.activation.subject=Subject of email sent to activated users.

LABEL_email.activation.from=Activation Email From
DEFLT_email.activation.from={"":"Activation Notification <noreply@@PWM:SiteHost@>"}
DESCR_email.activation.from=From address of email sent to activated users.

LABEL_email.activation.plainBody=Activation Plaintext Email Body
DEFLT_email.activation.plainBody={"":"Thank you for activating your account."}
DESCR_email.activation.plainBody=Body of email sent to activated users.

LABEL_email.activation.htmlBody=Activation HTML Email Body
DEFLT_email.activation.htmlBody={"":"<b>Thank you for activating your account.<\/b>"}
DESCR_email.activation.htmlBody=Body of email sent to activagted users.

LABEL_email.activation.token.subject=Activation Verification Subject
DEFLT_email.activation.token.subject={"":"Account Verification"}
DESCR_email.activation.token.subject=Subject of email sent during activation verification process.

LABEL_email.activation.token.from=Activation Verification From
DEFLT_email.activation.token.from={"":"Account Verification <noreply@@PWM:SiteHost@>"}
DESCR_email.activation.token.from=From address of email sent during activation verification process.

LABEL_email.activation.token.plainBody=Activation Verification Plaintext Email Body
DEFLT_email.activation.token.plainBody={"":"Your activation token is %TOKEN%."}
DESCR_email.activation.token.plainBody=Body of email sent during activation verification process.

LABEL_email.activation.token.htmlBody=Activation Verification HTML Email Body
DEFLT_email.activation.token.htmlBody={"":"Thank you for requesting your account activation.  To continue with your account activation, please <a href=\\"@PWM:SiteURL@/public/ActivateUser/%TOKEN%\\">click here</a> to continue.  Alternatively, you can copy and paste the following code <br/><br/><b>%TOKEN%</b><br/>to continue.  If you did not request to create a new account, you do not need to take any action."}
DESCR_email.activation.token.htmlBody=Body of email sent during activation verification process.

LABEL_email.challenge.token.subject=Forgotten Password Verification Email Subject
DEFLT_email.challenge.token.subject={"":"Forgotten Password Information"}
DESCR_email.challenge.token.subject=Subject of email sent during forgotten password token process.

LABEL_email.challenge.token.from=Forgotten Password Verification Email From
DEFLT_email.challenge.token.from={"":"Forgotten Password <noreply@@PWM:SiteHost@>"}
DESCR_email.challenge.token.from=From address of email sent during forgotten password token process.

LABEL_email.challenge.token.plainBody=Forgotten Password Verification Plaintext Email Body
DEFLT_email.challenge.token.plainBody={"":"Your activation token is %TOKEN%."}
DESCR_email.challenge.token.plainBody=Body of email sent during forgotten password token process.

LABEL_email.challenge.token.htmlBody=Forgotten Password Verification HTML Email Body
DEFLT_email.challenge.token.htmlBody={"":"Thank you for requesting a password reset.<br/><br/>To continue with your password reset, please <a href=\\"@PWM:SiteURL@/public/ForgottenPassword/%TOKEN%\\">click here</a> to continue.<br/><br/>Alternatively, you can enter the code <b>%TOKEN%</b> to continue.<br/><br/>If you do not wish to change your password at this time, you do not need to take any action."}
DESCR_email.challenge.token.htmlBody=Body of email sent during forgotten password token process.

#*******************************************************************************************#
#                                         SMS                                               #
#*******************************************************************************************#
CATEGORY_LABEL_SMS=SMS
CATEGORY_DESCR_SMS=Configuration settings for all PWM sent SMS messages. For SMS message text \
  configuration settings are provided.  It is encouraged that for each configured setting \
  and locale, SMS texts are configured.  PWM will deliver the message using the configured \
  short message service gateway.

LABEL_sms.userSmsAttribute=User SMS number attribute
DEFLT_sms.userSmsAttribute=personalMobile
DESCR_sms.userSmsAttribute=User LDAP attribute containing the user's mobile phone number for SMS.
REGEX_sms.userSmsAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_sms.queueMaxAge=Maximum SMS Queue Age
DEFLT_sms.queueMaxAge=300
DESCR_sms.queueMaxAge=Maximum age (in seconds) an sms can wait in the send queue.  If an sms is in the send \
  queue longer than this time, it will be discarded.  SMS messages only persist in the send queue if there is \
  an IO or network error to the sms gateway server while sending the message.

LABEL_sms.gatewayURL=SMS Gateway
DEFLT_sms.gatewayURL=https://sms.example.com/service
DESCR_sms.gatewayURL=URL for the SMS gateway
REGEX_sms.gatewayURL=^https?://[A-Za-z0-9_\\.-]{3,}(\\:[0-9]{1,5})?(/.*)?

LABEL_sms.gatewayUser=SMS Gateway User
DEFLT_sms.gatewayUser=
DESCR_sms.gatewayUser=User name for the SMS gateway

LABEL_sms.gatewayPassword=SMS Gateway Password
DEFLT_sms.gatewayPassword=
DESCR_sms.gatewayPassword=User password for the SMS gateway

LABEL_sms.gatewayMethod=HTTP(S) Method
DEFLT_sms.gatewayMethod=POST
DESCR_sms.gatewayMethod=HTTP(S) protocol method to be used for sending SMS messages.
REGEX_sms.gatewayMethod=
OPTS_sms.gatewayMethod={"POST":"POST", "GET":"GET"}

LABEL_sms.gatewayAuthMethod=SMS Gateway Authentication Method
DEFLT_sms.gatewayAuthMethod=REQUEST
DESCR_sms.gatewayAuthMethod=Method to be used for authentication on the SMS gateway.
REGEX_sms.gatewayAuthMethod=
OPTS_sms.gatewayAuthMethod={"REQUEST":"Request - Authentication will be part of the request","HTTP":"HTTP - Use HTTP basic authentication"}

LABEL_sms.requestData=SMS Request Data
DEFLT_sms.requestData={"":"user=%USER%&pass=%PASS%&to=%TO%&msg=%MESSAGE%"}
DESCR_sms.requestData=The data to be submitted in order to send an SMS message. You can use\
  certain codes that will be replaced:<ul>\
  <li><tt>%USER%</tt>: authentication user name</li>\
  <li><tt>%PASS%</tt>: authentication password</li>\
  <li><tt>%SENDERID%</tt>: sender identification</li>\
  <li><tt>%TO%</tt>: recipient SMS number</li>\
  <li><tt>%REQUESTID%</tt>: randomly generated request identifier</li>\
  <li><tt>%MESSAGE%</tt>: the message to be sent</li>\
  </ul>

LABEL_sms.requestContentType=SMS Data Content Type
DEFLT_sms.requestContentType=application/x-www-form-urlencoded
DESCR_sms.requestContentType=Content Type for POST data. This is the mime type for the content. \
  This only applies if the HTTP(S) Method is POST. Common values are:<ul>\
  <li><tt>application/x-www-form-urlencoded</tt>: HTTP form data</li>\
  <li><tt>text/plain</tt>: Plain ASCII data</li>\
  <li><tt>text/xml</tt>: XML document</li>\
  </ul>\
  Optionally, a character set can be appended. Eg.:<ul>\
  <li><tt>application/x-www-form-urlencoded; charset=utf-8</tt>: HTTP form data in UTF-8 encoding</li>\
  </ul>
REGEX_sms.requestContentType=^[A-Za-z0-9_\\.-]+/[A-Za-z0-9\\+_\\.-]+([ \t]*;[ \t]*[A-Za-z0-9_\\.-]+=([A-Za-z0-9_\\.-]|\\".+\\")+)*$

LABEL_sms.requestContentEncoding=SMS Data Content Encoding
DEFLT_sms.requestContentEncoding=URL
DESCR_sms.requestContentEncoding=Data for fields in the SMS data may need \
  encoding or escaping.\
  </br>\
  See <a href="http://commons.apache.org/lang/api-release/org/apache/commons/lang/StringEscapeUtils.html" \
  target="_new">Apache Commons JavaDocs</a> for detailed information.
REGEX_sms.requestContentEncoding=
OPTS_sms.requestContentEncoding={"NONE":"None - no encoding (use at your own risk)",\
  "CSV":"CSV -Escape for comma separated values",\
  "HTML":"HTML - for HTML data",\
  "JAVA":"Java - for Java String representations",\
  "JAVASCRIPT":"Javascript - recommended for JSON formatted documents",\
  "SQL":"SQL - turn single-quotes (') into double single-quotes ('')",\
  "URL":"URL - recommended for GET requests and POST with form data (default)",\
  "XML":"XML - for XML and/or SOAP services"}

LABEL_sms.httpRequestHeaders=SMS Gateway HTTP Request Headers
DEFLT_sms.httpRequestHeaders=[""]
DESCR_sms.httpRequestHeaders=Additional HTTP request headers for the SMS request, for example SOAPAction for SOAP messages.
REGEX_sms.httpRequestHeaders=^[A-Za-z0-9_\\.-]+:.*

LABEL_sms.maxTextLength=Maximum SMS Text Length
DEFLT_sms.maxTextLength=140
DESCR_sms.maxTextLength=Maximum length for SMS text. Some services allow texts longer than one \
  message (generally 140 bytes). If the text is longer than the configured maximum, multiple requests \
  will be made.

LABEL_sms.responseOkRegex=Response Regular Expressions
DEFLT_sms.responseOkRegex=[""]
DESCR_sms.responseOkRegex=Regular expressions that can be used to determine whether the SMS has been \
  sent succesfully. If the response matches any of the expressions, the transmission is considered \
  succesful. If no expressions are entered, all transmissions are assumed successful. \
  NOTE: the string must match an entire line. Use <tt>.*</tt> to match anything after the required texts.

LABEL_sms.senderID=SMS Sender ID
DEFLT_sms.senderID=
DESCR_sms.senderID=Alphanumerical sender identification. If blank, the provider \
  will most likely use a default or anonymous sender identification. In most cases \
  the sender ID must be validated by the SMS provider. Please contact your provider \
  for values that can be used as a valid sender identification.

LABEL_sms.phoneNumberFormat=SMS Phone Number Format
DEFLT_sms.phoneNumberFormat=ZEROS
DESCR_sms.phoneNumberFormat=The format that should be used for the mobile phone number.
REGEX_sms.phoneNumberFormat=
OPTS_sms.phoneNumberFormat={"PLAIN":"Plain - country code (e.g. 1 for USA) plus subscriber number (e.g. 12312345): 112312345","PLUS":"Plus - Same as plain, but with a plus sign as a prefix: +112312345","ZEROS":"Zeros -  Same as plain, but prefixed with a double zero: 00112312345"}

LABEL_sms.defaultCountryCode=Default SMS Country Code
DEFLT_sms.defaultCountryCode=1
DESCR_sms.defaultCountryCode=Default country code for SMS phone numbers, see \
  <a href="http://countrycode.org/" target="_blank">http://countrycode.org/</a> for a list of \
  country codes.
REGEX_sms.defaultCountryCode=^\d{1,3}$

LABEL_sms.requestId.characters=Request Id Characters
DEFLT_sms.requestId.characters=0123456789abcdef
DESCR_sms.requestId.characters=Available characters SMS request id

LABEL_sms.requestId.length=Request Id Length
DEFLT_sms.requestId.length=6
DESCR_sms.requestId.length=Length of the SMS request id

LABEL_sms.challenge.token.message=Challenge Token SMS Text
DEFLT_sms.challenge.token.message={"":"Your activation token is %TOKEN%."}
DESCR_sms.challenge.token.message=Message text of SMS sent during forgotten password token process.

LABEL_sms.activation.token.message=Activation Token SMS Text
DEFLT_sms.activation.token.message={"":"Your activation token is %TOKEN%."}
DESCR_sms.activation.token.message=Message text of token SMS sent during activation process.

LABEL_sms.activation.message=Activation SMS Text
DEFLT_sms.activation.message={"":"Thank you for activating your account."}
DESCR_sms.activation.message=Message text of SMS sent after succesful activation.

LABEL_sms.useUrlShortener=Use URL Shortener
DEFLT_sms.useUrlShortener=false
DESCR_sms.useUrlShortener=Enable this option to use a url shortener service like tinyurl.com, bit.ly and goo.gl. \
  This will enable searching the SMS text for http and https urls and replace them with a shortened version. \
  The service to be used can be configured under the Miscellaneous options. Be sure to check View|Advanced.

#*******************************************************************************************#
#                                 Global Password Policy                                    #
#*******************************************************************************************#
CATEGORY_LABEL_PASSWORD_POLICY=Password Policy
CATEGORY_DESCR_PASSWORD_POLICY=This password policy is applied to all PWM users, regardless \
  of any other password policy that may be configured in the directory.  If so configured, PWM reads \
  the password policy configured for the user in the directory and <b>merges</b> the policy with \
  the global policy configured here.  When policies are merged, the <b>most restrictive</b> setting \
  is used.

LABEL_password.policy.source=Password Policy Source
DEFLT_password.policy.source=MERGE
DESCR_password.policy.source=This setting determines where PWM should read password policy settings from.  If "LDAP" is selected, \
 PWM will attempt to read the policy out of the ldap directory, and many of the following settings are ignored.  If "PWM" is selected, \
  the policy settings on this page are used, and any policy settings in the LDAP directory are ignored.  If "Merge" is selected, PWM will \
  use both areas to read policy settings, and where there is any conflict, PWM will chose the <b>most restrictive</b> value of the policy.
OPTS_password.policy.source={"MERGE":"Merge PWM and LDAP (default)", "LDAP":"LDAP", "PWM":"PWM"}

LABEL_password.policy.minimumLength=Minimum Length
DEFLT_password.policy.minimumLength=2
DESCR_password.policy.minimumLength=Minimum length of password.   A value of zero disables this check.

LABEL_password.policy.maximumLength=Maximum Length
DEFLT_password.policy.maximumLength=64
DESCR_password.policy.maximumLength=Maximum length of password.  A value of zero disables this check.

LABEL_password.policy.maximumRepeat=Maximum Repeat
DEFLT_password.policy.maximumRepeat=0
DESCR_password.policy.maximumRepeat=Maximum times any character may be repeated throughout the password.  Case is \
 ignored for this check. A value of zero disables this check.

LABEL_password.policy.maximumSequentialRepeat=Maximum Sequential Repeat
DEFLT_password.policy.maximumSequentialRepeat=0
DESCR_password.policy.maximumSequentialRepeat=Maximum times any character may be sequentially repeated throughout the password.\
 Case is ignored for this check.  A value of zero disables this check.

LABEL_password.policy.allowNumeric=Allow Numeric Characters
DEFLT_password.policy.allowNumeric=true
DESCR_password.policy.allowNumeric=Allow numeric characters in password.

LABEL_password.policy.allowFirstCharNumeric=Allow First Character Numeric
DEFLT_password.policy.allowFirstCharNumeric=true
DESCR_password.policy.allowFirstCharNumeric=Allow the first character of the password to be numeric.  Applies only if numeric characters are allowed.

LABEL_password.policy.allowLastCharNumeric=Allow Last Character Numeric
DEFLT_password.policy.allowLastCharNumeric=true
DESCR_password.policy.allowLastCharNumeric=Allow the last character of the password to be numeric.  Applies only if numeric characters are allowed.

LABEL_password.policy.minimumNumeric=Minimum Numeric
DEFLT_password.policy.minimumNumeric=0
DESCR_password.policy.minimumNumeric=Minimum amount of numeric characters required (if numeric allowed).  A value of zero disables this check.

LABEL_password.policy.maximumNumeric=Maximum Numeric
DEFLT_password.policy.maximumNumeric=0
DESCR_password.policy.maximumNumeric=Maximum amount of numeric characters required (if numeric allowed).  A value of zero disables this check.

LABEL_password.policy.allowSpecial=Allow Special Characters
DEFLT_password.policy.allowSpecial=true
DESCR_password.policy.allowSpecial=Allow special (non alpha-numeric) characters in password.

LABEL_password.policy.allowFirstCharSpecial=Allow First Character Special
DEFLT_password.policy.allowFirstCharSpecial=true
DESCR_password.policy.allowFirstCharSpecial=Allow the first character of the password to be special.  Applies only if special characters are allowed.

LABEL_password.policy.allowLastCharSpecial=Allow Last Character Special
DEFLT_password.policy.allowLastCharSpecial=true
DESCR_password.policy.allowLastCharSpecial=Allow the last character of the password to be special.  Applies only if special characters are allowed.

LABEL_password.policy.maximumSpecial=Maximum Special
DEFLT_password.policy.maximumSpecial=0
DESCR_password.policy.maximumSpecial=Maximum amount of special characters required (if special allowed).  A value of zero disables this check.

LABEL_password.policy.minimumSpecial=Minimum Special
DEFLT_password.policy.minimumSpecial=0
DESCR_password.policy.minimumSpecial=Minimum amount of special characters required (if special allowed).  A value of zero disables this check.

LABEL_password.policy.maximumAlpha=Maximum Alphabetic
DEFLT_password.policy.maximumAlpha=0
DESCR_password.policy.maximumAlpha=Maximum amount of alphabetic characters required.  A value of zero disables this check.

LABEL_password.policy.minimumAlpha=Minimum Alphabetic
DEFLT_password.policy.minimumAlpha=0
DESCR_password.policy.minimumAlpha=Minimum amount of alphabetic characters required.  A value of zero disables this check.

LABEL_password.policy.maximumNonAlpha=Maximum Non-Alphabetic
DEFLT_password.policy.maximumNonAlpha=0
DESCR_password.policy.maximumNonAlpha=Maximum amount of non-alphabetic characters required.  A value of zero disables this check.

LABEL_password.policy.minimumNonAlpha=Minimum Non-Alphabetic
DEFLT_password.policy.minimumNonAlpha=0
DESCR_password.policy.minimumNonAlpha=Minimum amount of non-alphabetic characters required.  A value of zero disables this check.

LABEL_password.policy.maximumLowerCase=Maximum Lowercase
DEFLT_password.policy.maximumLowerCase=0
DESCR_password.policy.maximumLowerCase=Maximum amount of lowercase characters required.  A value of zero disables this check.

LABEL_password.policy.minimumLowerCase=Minimum Lowercase
DEFLT_password.policy.minimumLowerCase=0
DESCR_password.policy.minimumLowerCase=Minimum amount of lowercase characters required.  A value of zero disables this check.

LABEL_password.policy.maximumUpperCase=Maximum Uppercase
DEFLT_password.policy.maximumUpperCase=0
DESCR_password.policy.maximumUpperCase=Maximum amount of uppercase characters required.  A value of zero disables this check.

LABEL_password.policy.minimumUpperCase=Minimum Uppercase
DEFLT_password.policy.minimumUpperCase=0
DESCR_password.policy.minimumUpperCase=Minimum amount of uppercase characters required.  A value of zero disables this check.

LABEL_password.policy.minimumUnique=Minimum Unique Characters
DEFLT_password.policy.minimumUnique=0
DESCR_password.policy.minimumUnique=Minimum amount of unique characters allowed.  A value of zero disables this check.

LABEL_password.policy.maximumOldPasswordChars=Maximum Characters From Previous Password
DEFLT_password.policy.maximumOldPasswordChars=0
DESCR_password.policy.maximumOldPasswordChars=Maximum amount of characters from the previous password allowed in the new password.  A value of zero disables this check.
 check.

LABEL_password.policy.caseSensitivity=Password is Case Sensitive
DEFLT_password.policy.caseSensitivity=read
DESCR_password.policy.caseSensitivity=Controls if the password is case sensitive.  In most cases, this can be read from the directory, but in some cases \
  PWM is not able to correctly determine this value, so you may override it here.
OPTS_password.policy.caseSensitivity={"read":"Read from Directory", "true":"True (Case Sensitive)", "false":"False (Case Insensitive)"}

LABEL_password.policy.checkWordlist=Enable Wordlist
DEFLT_password.policy.checkWordlist=true
DESCR_password.policy.checkWordlist=Check the password against the configured PWM Wordlist.

LABEL_password.policy.ADComplexity=Enforce Microsoft-AD Password Complexity
DEFLT_password.policy.ADComplexity=false
DEFLT-AD_password.policy.ADComplexity=true
DEFLT-ADDB_password.policy.ADComplexity=true
DESCR_password.policy.ADComplexity=Enforce MS-ActiveDirectory style password complexity rules:\
<ul><li>Not contain the user's account name or parts of the user's full name that exceed two consecutive characters</li>\
<li>Be at least six characters in length</li>\
<li>Contain characters from three of the following four categories:\
  <ul><li>English uppercase characters (A through Z)</li>\
  <li>English lowercase characters (a through z)</li>\
  <li>Base 10 digits (0 through 9)</li>\
  <li>Non-alphabetic characters (for example, !, $, #, %)</li></ul>\
</ul>

LABEL_password.policy.regExMatch=Required Regular Expression Matches
DEFLT_password.policy.regExMatch=[""]
DESCR_password.policy.regExMatch=A Regular Expression pattern the password must match in order to be allowed.  Multiple \
 patterns can be listed.   Patterns must \
 follow the rules listed for <a href=http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html">Pattern</a>.  \
 A pattern must match the <i>entire</i> password to be applied.  A partial match is ignored.

LABEL_password.policy.regExNoMatch=Disallowed Regular Expression Matches
DEFLT_password.policy.regExNoMatch=[""]
DESCR_password.policy.regExNoMatch=A Regular Expression pattern the password must <b>not</b> match in order to be allowed.  Multiple \
 patterns can be listed.   Patterns must \
 follow the rules listed for <a href=http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html">Pattern</a>. \
 A pattern must match the <i>entire</i> password to be applied.  A partial match is ignored.

LABEL_password.policy.disallowedValues=Disallowed Values
DEFLT_password.policy.disallowedValues=["password","test"]
DESCR_password.policy.disallowedValues=A case insensitive list of values not allowed to be used as passwords.

LABEL_password.policy.disallowedAttributes=Disallowed Attributes
DEFLT_password.policy.disallowedAttributes=["cn","givenName","sn"]
DESCR_password.policy.disallowedAttributes=A list of attributes not allowed to be used as passwords.  For a given user, the \
  values will be read and will not be permitted to be used as part of the password value.  This check is case insensitive.
REGEX_password.policy.disallowedAttributes=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_password.sharedHistory.enable=Enable Shared History
DEFLT_password.sharedHistory.enable=false
DESCR_password.sharedHistory.enable=Enable a global shared password history for all PWM users.  If enabled, all pwm users \
  will share a common password history.  This helps prevent common organizational words from being used as passwords by users. \
  Passwords are stored as a salted encrypted hash in the PwmDB.

LABEL_password.sharedHistory.age=Shared History Age
DEFLT_password.sharedHistory.age=2419200
DESCR_password.sharedHistory.age= PWM will periodically remove values older than the configured value here.  Value is \
 specified in seconds.  Default is 4 weeks (60s * 60m * 24h * 7d * 4w = 2419200)\

LABEL_password.policy.minimumStrength=Minimum Password Strength
DEFLT_password.policy.minimumStrength=0
DESCR_password.policy.minimumStrength=PWM judges password strength on a scale of 0 to 100 irrespective of the \
  password policy.  This setting requires that the user have a password that meets the minimum strength level \
  specified here, regardless of other password policy rules.   45 or better is considered "good" while 70 or better \
  is considered "strong".  A value of 0 disables this check.

LABEL_password.policy.changeMessage=Password Change Message
DEFLT_password.policy.changeMessage={"":""}
DESCR_password.policy.changeMessage=Message to be displayed to user during password changes.  May include HTML markup.  \
  This setting may be overwritten by a change password message read as part of an ldap password policy.

LABEL_password.policy.ruleText=Password Rule Text
DEFLT_password.policy.ruleText={"":""}
DESCR_password.policy.ruleText=Rules to display to user.  By default this is blank, and PWM will construct an appropriate \
  rule text to show to the user.  However if this setting is configured, the text in this setting will replace the automatically \
  generated rule text.  HTML tags are permitted.

LABEL_pwm.wordlist.location=Wordlist File
DEFLT_pwm.wordlist.location=wordlist.zip
DESCR_pwm.wordlist.location=PWM supports worldlist dictionary checking to prevent users from using commonly used words as \
 passwords.   Using wordists is an important part of password security.  Wordlists are used by intruders to guess common \
 passwords.   The default wordlist included with PWM contains commonly used English passwords.  More \
 comprehensive wordlists are available on the <a href="http://code.google.com/p/pwm">PWM project</a> page.  \
 Wordlists with over 10 million words have been tested. \
 <br/><br/>\
 The first time PWM is run with a new wordlist setting, it will take some time to compile \
 the wordlist into a database.  See the status screen/logs for progress information. \
 The wordlist format is one or more text files containing a single word per line, enclosed \
 in a ZIP file.  The String <i>!#comment:</i> at the beginning of a line indicates a comment.


#*******************************************************************************************#
#                               eDirectory Settings                                         #
#*******************************************************************************************#
CATEGORY_LABEL_EDIRECTORY=Novell eDirectory
CATEGORY_DESCR_EDIRECTORY=These settings are only used when Novell eDirectory is the ldap \
 directory service being used.\

LABEL_ldap.edirectory.enableNmas=Enable NMAS Extensions
DEFLT_ldap.edirectory.enableNmas=true
DESCR_ldap.edirectory.enableNmas=When connecting to a Novell eDirectory ldap directory, this parameter will control if PWM \
 will use NMAS extensions when connecting to the ldap directory.  Enabling nmas results in:\
 <ul><li>better error messages when using unversal password policies</li>\
 <li>better error handling during certain change password scenarios</li></ul>\
 Unless you are using an older version of eDirectory (pre 8.8 or before), it is generally \
 best to set this to true.\
 <br/><br/>\
 All NMAS operations require an SSL connection to the directory.

LABEL_ldap.edirectory.ws.pwdMgtURL=UserApp Password SOAP Service URL
DEFLT_ldap.edirectory.ws.pwdMgtURL=
DESCR_ldap.edirectory.ws.pwdMgtURL=If supplied, this setting will change the behavior of the PWM forgotten password function. \
  Instead of using the PWM stored response set in ldap, PWM will call the Novell UserApp forgotten password web service to discover \
  the user's stored questions and test the user's responses.  If the forgotten password web service indicates success, PWM \
  will then forward the user to the change password screen which operates through LDAP.  The web services's "processChgPwd" method \
  will not be used.<br/><br/>\
  <i>Example:</i> https://10.1.1.1:8443/IDM/pwdmgt/service\
  <br/><br/>\
  <b>Note:</b> A secure (https) URL should be used for security reasons.  You may need to import the HTTPS's certificate into \
  the java keystore.\
 <br/><b>Note:</b> The UserApp Password SOAP service only exists in Novell UserApp v3.7 or greater.


LABEL_ldap.edirectory.readChallengeSets=Read Challenge Sets
DEFLT_ldap.edirectory.readChallengeSets=true
DESCR_ldap.edirectory.readChallengeSets=If true, PWM will read the challenge set configuration from eDirectory and apply it to \
users logging into PWM.  If an eDirectory challenge set is applied to the user, PWM \
will use that policy, otherwise PWM will use the PWM configured challenge questions \
for forgotten password.\
\
To use only NMAS configured challenge sets, be sure to blank out the pwm required \
and forgotten questions, or else those will be used in cases where no eDirectory policy \
is found or the is an error reading the policy.

LABEL_ldap.edirectory.storeNmasResponses=Store NMAS Responses
DEFLT_ldap.edirectory.storeNmasResponses=true
DESCR_ldap.edirectory.storeNmasResponses=If true, PWM will save responses to the NMAS response storage container on the user.  This \
storage is in addition to any other configured response storage methods.  PWM will not use these \
stored responses during forgotten password recovery unless the "UserApp Password SOAP Service URL" setting is configured.

#*******************************************************************************************#
#                               Security Detection                                          #
#*******************************************************************************************#
CATEGORY_LABEL_SECURITY=Security
CATEGORY_DESCR_SECURITY=PWM has built in intruder detection independent of what a directory \
 may provide.  Because PWM may be exposed directly to the internet, this additional \
 layer of detection helps protect against direct attacks.  PWM will always deny a \
 password based authentication if the directory's intruder detection is enabled. \
 <br/><br/>\
 PWM's own intruder detection mechanisms are only stored in memory, and are not resetable, \
 thus, the timeouts should be relatively short.  The goal for PWM intruder detection isn't \
 to watch for human intruders, it is designed to stop robot or automatic attacks.\
 <br/><br/>\
 PWM uses an implementation of reCAPTCHA to prevent non-human attacks.  reCAPTCHA info can be found at <a href="http://www.google.com/recaptcha">http://www.google.com/recaptcha/</a>\
 <br/><br/>\
 Registration at the reCAPTCHA site will provide a public and private key which must \
 be configured here for reCAPTCHA support.  Additionally, the PWM servlet will need to \
 be able to make HTTP requests to <i>http://www.google.com/recaptcha/api/verify</i> during operation \
 or captcha verification will fail.

LABEL_pwm.securityKey=PWM Security Key
DEFLT_pwm.securityKey=
REGEX_pwm.securityKey=.{32}.*
DESCR_pwm.securityKey=PWM Security Key used for tokens and other crypto functions.  A value is not required unless other\
  features are configured to require it, such as the Crypto Token Storage Method.\
  <p>If configured, this value must be 32 characters in length.  The longer and more random this value,\
  the more secure its use will be.  If multiple PWM instances are in use, each instance should be configured with\
  the same value.</p>

LABEL_intruder.user.resetTime=User Reset Time
DEFLT_intruder.user.resetTime=300
DESCR_intruder.user.resetTime=This setting defines the time period after which a bad attempt will be cleared from \
 the lockout table.  The user lockout table is marked for a user anytime a user has \
 a failed attempt to authenticate, recover a password, or activate a user account. \
 <br/><br/>\
 Value is in number of seconds.  A value of zero disables the user lockout table. \

LABEL_intruder.user.maxAttempts=User Maximum Attempts
DEFLT_intruder.user.maxAttempts=10
DESCR_intruder.user.maxAttempts=The maximum number of attempts a user may make within the reset time interval.  Once \
 this value is exceeded, the user will not be able to perform any PWM activities until \
 the reset time interval has passed.

LABEL_intruder.address.resetTime=Address Reset Time
DEFLT_intruder.address.resetTime=120
DESCR_intruder.address.resetTime=This setting defines the time period after which a bad attempt will be cleared from \
 the lockout table.  The address lockout table is marked for any source ip address \
 anytime any user has a failed attempt to authenticate, recover a password, or activate \
 a user account from that address.\
 <br/><br/>\
 Depending on how PWM is deployed it may not be able to correctly identify the IP address \
 of the user.  You can check if it is getting the correct IP address by looking at \
 the light text on the bottom of every screen, or by looking at the PWM logs.\
 <br/><br/>\
 Some scenarios where PWM would not get the correct address is where it is behind \
 a reverse proxy that doesn't set the X-Forwarded-For header, or behind some types \
 of NAT firewalls.\
 <br/><br/>\
 Value is in number of seconds.  A value of zero disables the address lockout table.
LABEL_intruder.address.maxAttempts=Address Maximum Attempts
DEFLT_intruder.address.maxAttempts=30
DESCR_intruder.address.maxAttempts=The maximum number of attempts any user may make within a particular address.  Once \
 this value is exceeded, no user from that address will be able to perform any PWM \
 activities until the reset time interval has passed.\

LABEL_intruder.session.maxAttempts=Session Maximum Attempts
DEFLT_intruder.session.maxAttempts=15
DESCR_intruder.session.maxAttempts=The maximum number of attempts any user may make during a particular browser session. \
 Once this limit is exceeded, it will never reset.  Opening a new browser or waiting for \
 the session idle timeout will get the new user a new session, however.\

LABEL_captcha.recaptcha.publicKey=reCAPTCHA Public Key
DEFLT_captcha.recaptcha.publicKey=
DESCR_captcha.recaptcha.publicKey=Public reCAPTCHA key.  If blank no captcha verification will be performed.

LABEL_captcha.recaptcha.privateKey=reCAPTCHA Private Key
DEFLT_captcha.recaptcha.privateKey=
DESCR_captcha.recaptcha.privateKey=Private reCAPTCHA key.  If blank no captcha verification will be performed.

LABEL_captcha.skip.param=Captcha Skip Parameter Value
DEFLT_captcha.skip.param=
DESCR_captcha.skip.param=Allows for skipping the captcha request if a known parameter is passed as a request \
 paramater with a key of "skipCaptcha".   This is useful for "internal" clients / links where the captcha is unneccessary.\
 <br/><br/>\
 For example, if the value is 'okay', a request to:\
 <br/><br/>\
 <i>https://pwmserver.example.com/pwm/public/ForgottenPassword?skipCaptcha=okay</i>\
 <br/><br/>\
 would cause PWM to skip the captcha check.\

LABEL_captcha.skip.cookie=Captcha Skip Cookie
DEFLT_captcha.skip.cookie=
DESCR_captcha.skip.cookie=Allows for skipping the captcha request if a known browser cookie value is held by the \
 browser the cookie is stored in a cookie named 'pwm-captcha-key'.  If the value is correct,\
 then the captcha check is skipped.  The cookie value is stored in the browser after a \
 successful captcha check.\
 <br/><br/>\
 If blank, then no cookie will be read/stored.  If set to 'INSTANCEID', then the instanceID \
 of pwm (see web.xml instanceID setting) will be used.  If set to any other value, then \
 the literal value will be used.

LABEL_security.page.enableRequestSequence=Enable Back Button / Multiple Browser-Tab Detection
DEFLT_security.page.enableRequestSequence=false
DESCR_security.page.enableRequestSequence=Enable detection of the use of back button or multiple browser windows/tabs.

LABEL_security.formNonce.enable=Enable Form Nonce
DEFLT_security.formNonce.enable=true
DESCR_security.formNonce.enable=Require a form nonce for each form in PWM to prevent certain types of cross-site scripting (XSS) attacks.

LABEL_security.ldap.simulateBadPassword=Enable Bad Password Simulation
DEFLT_security.ldap.simulateBadPassword=true
DESCR_security.ldap.simulateBadPassword=This feature will enable Bad Password simulation activity when a forgotten password \
  field is entered.  When an identified user attempts to recover a forgotten password but uses incorrect data, PWM will attempt \
  to authenticate to the directory using a known bad password value.  This is done to allow the ldap directory to trigger it's own defense mechanisms against \
  intruders.

LABEL_pwm.requireHTTPS=Require HTTPS
DEFLT_pwm.requireHTTPS=false
DESCR_pwm.requireHTTPS=Require HTTPS (instead of cleartext HTTP) traffic to the PWM server.  While non-secure connections are useful \
  during testing, production PWM servers should always have this setting set to true.

LABEL_enableSessionVerification=Enable Session Verification
DEFLT_enableSessionVerification=true
DESCR_enableSessionVerification=If true, sessions will be verified using a session verification key and a redirect.  This \
  verification proves that the browser can correctly establish a session with the pwm server.  Verification proves the browser \
  either supports cookies or URL sessions (if enabled) and the communication channel between browser and pwm is 'sticky' when \
  their are multiple pwm servers.  Additionally it helps prevent some types of XSS attacks.

LABEL_forceBasicAuth=Force Basic Authentication
DEFLT_forceBasicAuth=false
DESCR_forceBasicAuth=If false, then the form page will be presented for un-authenticated users, however if a basic auth header is present it will always be used.

LABEL_useXForwardedForHeader=Use X-Forwarded-For Header
DEFLT_useXForwardedForHeader=true
DESCR_useXForwardedForHeader=If present, use the X-Forwarded-For HTTP header value as the client IP address instead of \
 the source IP address of the HTTP connection.  X-Forwarded-For headers are typically added by upstream proxies or firewalls \
 and may be the only reliable way to identify the user's source IP address.

LABEL_allowUrlSessions=Allow URL Sessions
DEFLT_allowUrlSessions=false
DESCR_allowUrlSessions=If true, allow sessions to be managed via parameter on URL when cookies are not enabled.  This \
 allows browsers (such as some mobile devices) that do not support cookies.

#*******************************************************************************************#
#                               Security Detection                                          #
#*******************************************************************************************#
CATEGORY_LABEL_TOKEN=Tokens
CATEGORY_DESCR_TOKEN=Options for email and sms tokens sent to users.

LABEL_token.characters=Token Characters
DEFLT_token.characters=ABCDEFGHJKLMNPQRSTUVWXY3456789
DESCR_token.characters=Available characters for the email token.

LABEL_token.length=Token Length
DEFLT_token.length=16
DESCR_token.length=Length of the email token

LABEL_token.lifetime=Token Maximum Lifetime
DEFLT_token.lifetime=3600
DESCR_token.lifetime=Length of lifetime a token is valid (in seconds).  Default is one hour.

LABEL_token.storageMethod=Token Storage Method
DEFLT_token.storageMethod=STORE_PWMDB
DESCR_token.storageMethod=Storage method used to save issued tokens.\
 <table style="width: 400px">\
 <tr><td>Method</td><td>Description</td></tr>\
 <tr><td>PwmDB</td><td>Stores the tokens in the local embedded PwmDB database.  Tokens will not across multiple PWM instances.</td></tr>\
 <tr><td>DB</td><td>Store the tokens in a configured, remote database.  Tokens will work across multiple PWM instances.</td></tr>\
 <tr><td>Crypto</td><td>Use crypto to create and read tokens, they are not stored locally.  Tokens will work across multiple PWM instances if they have the same PWM Security Key.</td></tr>\
 <tr><td>LDAP</td><td>Use the LDAP directory to store tokens.  Tokens will work across multiple PWM instances.  LDAP tokens cannot be used as New User Registration tokens.</td></tr>\
 </table>\
  Except when using the "Crypto" method, tokens will be generated using the length and charachter configuration options. When\
  using the "Crypto" method, tokens will be much longer.

OPTS_token.storageMethod={"STORE_PWMDB":"PwmDB", "STORE_DB":"DB", "STORE_CRYPTO":"Crypto", "STORE_LDAP":"LDAP"}

LABEL_token.ldap.attribute=Token LDAP attribute name
DEFLT_token.ldap.attribute=pwmToken
DESCR_token.ldap.attribute=When using the LDAP Token Storage Method, this attribute will be used to store and search for tokens. \



#*******************************************************************************************#
#                                  Event Logging                                            #
#*******************************************************************************************#
CATEGORY_LABEL_LOGGING=Logging & Alerts
CATEGORY_DESCR_LOGGING=PWM will log events to three different places:\
  <ul>\
  <li><b>PwmDB</b> - PWM's local embedded database</li>\
  <li><b>ldap</b> - User events get saved to an attribute on the user entry</li>\
  <li><b>java</b> - PWM utilizes the standard Apache <a href="http://logging.apache.org/log4j/">log4j</a> library</li>\
  </ul>\
  Additionally, PWM's use of the log4j allows directing log events to file, database, syslog, Windows event log and other systems. \
  <br/><br/>\
  If enabled, alerts are sent to the Admin Alert To Address configured in the Email Settings.\
  <br/><br/>\

LABEL_events.healthCheck.minInterval=Health Check Frequency
DEFLT_events.healthCheck.minInterval=120
DESCR_events.healthCheck.minInterval=Frequency (in seconds) at which PWM performs a self-health check.  Default is two minutes.\
  Health Checks only occur when the health check results are being viewed.

LABEL_events.java.stdoutLevel=Java StdOut Log Level
DEFLT_events.java.stdoutLevel=INFO
DESCR_events.java.stdoutLevel=Default Log level for stdout.  Most servlet containers will redirect stdout to \
  a log file.  For example, tomcat logs stdout output to the <i>tomcat/logs/catalina.out</i> file by default.
REGEX_events.java.stdoutLevel=
OPTS_events.java.stdoutLevel={TRACE":"Trace","DEBUG":"Debug","INFO":"Info","WARN":"Warn","ERROR":"Error","FATAL":"Fatal","Off":"Off - no logging to stdout"}

LABEL_events.java.log4jconfigFile=Log4j Configuration File
DEFLT_events.java.log4jconfigFile=
DESCR_events.java.log4jconfigFile=Location and name of a log4j xml configuration file.  If specified, PWM will use this \
  file to configure the log4j system.  If unspecified, PWM will use a basic log4j configuration logging only to stdout. \
  The location specified by this setting is relative to PWM's <i>WEB-INF</i> directory.  PWM includes an example \
  <i>log4jconfig.xml</i> file.

LABEL_events.pwmDB.maxEvents=Maximum PwmDB Events
DEFLT_events.pwmDB.maxEvents=1000000
DESCR_events.pwmDB.maxEvents=Maximum log events stored in PwmDB.  PWM will retain this number of events in the local \
 PwmDB database and use these to display in the admin event log screen.\
 <br/><br/>\
 This setting does not effect the normal log files configured in log4jconfig.xml or \
 tomcat's log file settings.\
 <br/><br/>\
 Approximately 100MB of disk space will be consumed for each 100,000 log events.

LABEL_events.pwmDB.maxAge=Maximum Age PwmDB Events
DEFLT_events.pwmDB.maxAge=2419200
DESCR_events.pwmDB.maxAge=Maximum age of events stored in PwmDB. \
 <br/><br/>\
 This setting does not effect log files configured in log4jconfig.xml or tomcat's log file settings.\
 <br/><br/>\
 PWM will periodically remove values older than the configured value here.  Value is \
 specified in seconds.  Default is 4 weeks (60s * 60m * 24h * 7d * 4w = 2419200).  A value \
 of zero will cause PWM to not remove events due to age.\

LABEL_events.pwmDB.logLevel=PwmDB Log Level
DEFLT_events.pwmDB.logLevel=INFO
DESCR_events.pwmDB.logLevel=Level at which to log events in the PwmDB.
OPTS_events.pwmDB.logLevel={"TRACE":"Trace","DEBUG":"Debug","INFO":"Info","WARN":"Warn","ERROR":"Error","FATAL":"Fatal","Off":"Off - no logging to PwmDB"}

LABEL_events.ldap.attribute=User History Attribute
DEFLT_events.ldap.attribute=pwmEventLog
DEFLT-ADDB_events.ldap.attribute=
DESCR_events.ldap.attribute=Attribute used to write a user event attribute in ldap.  The user event log attribute will \
 hold an XML document with the users pwm Event history.  Leave blank to disable \
 logging event history to ldap.
REGEX_events.ldap.attribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_events.ldap.maxEvents=User History Maximum Events
DEFLT_events.ldap.maxEvents=20
DESCR_events.ldap.maxEvents=Maximum number of events to hold in the event history attribute for a user.

LABEL_events.alert.startup.enable=Startup Alerts
DEFLT_events.alert.startup.enable=true
DESCR_events.alert.startup.enable=If true, send an alert to the PWM Administrator when PWM is started.

LABEL_events.alert.shutdown.enable=Shutdown Alerts
DEFLT_events.alert.shutdown.enable=true
DESCR_events.alert.shutdown.enable=If true, send an alert to the PWM Administrator when PWM is shutdown.

LABEL_events.alert.intruder.enable=Intruder Alerts
DEFLT_events.alert.intruder.enable=true
DESCR_events.alert.intruder.enable=If true, send an alert to the PWM Administrator when an intruder is detected.

LABEL_events.alert.fatalEvent.enable=Fatal Event Alerts
DEFLT_events.alert.fatalEvent.enable=true
DESCR_events.alert.fatalEvent.enable=If true, send an alert to the PWM Administrator when a fatal event occurs.

LABEL_events.alert.configModify.enable=Configuration Modification Alerts
DEFLT_events.alert.configModify.enable=true
DESCR_events.alert.configModify.enable=If true, send an email when the configuration has been modified.

LABEL_events.alert.dailySummary.enable=Daily Summary Alerts
DEFLT_events.alert.dailySummary.enable=true
DESCR_events.alert.dailySummary.enable=If true, send an email once a day (at 0:00 GMT) to the PWM Administrator with a summary of the day's statistics and health.



#*******************************************************************************************#
#                                  Challenge Policy                                         #
#*******************************************************************************************#
CATEGORY_LABEL_CHALLENGE=Challenge Policy
CATEGORY_DESCR_CHALLENGE=Challenge Policy.  If a \
  challenge policy is read from the directory, that policy will override the settings \
  listed here.


LABEL_challenge.enable=Enable Setup Responses
DEFLT_challenge.enable=true
DESCR_challenge.enable=If enabled, save responses page will be available to users.

LABEL_challenge.forceSetup=Force Response Setup
DEFLT_challenge.forceSetup=true
DESCR_challenge.forceSetup=If true, the user will be directed to configure challenge/response before logging out of PWM. \
 This accounts for new user creation and activation, and other scenarios.  The user is \
 forced check to see if eligible for allowSetup, and also if they do not have valid \
 responses already configured.\

LABEL_challenge.minRandomRequired=Minimum Random Required
DEFLT_challenge.minRandomRequired=2
DESCR_challenge.minRandomRequired=Minimum number of random questions required at time of forgotten password recovery.

LABEL_challenge.minRandomsSetup=Minimum Random Challenges Required During Setup
DEFLT_challenge.minRandomsSetup=4
DESCR_challenge.minRandomsSetup=The minimum number of random questions the user is required to complete during \
  Response Setup.  If this number is higher then the available randoms, or lower then the minimum required, it will \
  be adjusted accordingly.  Set to zero to force all available randoms to be configured at time of setup.

LABEL_challenge.caseInsensitive=Case Insensitive Responses
DEFLT_challenge.caseInsensitive=true
DESCR_challenge.caseInsensitive=Control the case sensitivity of responses.  If marked true, then responses \
 will be deemed correct even if case is wrong.  Changing this value does not \
 change existing stored responses -- the case sensitive flag is saved on each \
 user's stored response.

LABEL_challenge.maxChallengeLengthInResponse=Maximum Characters of Challenge Allowed In Response
DEFLT_challenge.maxChallengeLengthInResponse=3
DESCR_challenge.maxChallengeLengthInResponse=If greater then zero, then no more of this amount of charachters (of a whitespace \
  seperated word) will be permitted to appear in the corresponding response.  This prevents a user's response to be the same as \
  the challenge.



LABEL_challenge.allowDuplicateResponses=Allow Duplicate Responses
DEFLT_challenge.allowDuplicateResponses=false
DESCR_challenge.allowDuplicateResponses=Control if each response is required to be unique

LABEL_challenge.applyWorldlist=Apply Wordlist
DEFLT_challenge.applyWorldlist=false
DESCR_challenge.applyWorldlist=Prevent commonly used words from being used as responses.  If true, and a wordlist is \
 configured, then users will not be able to use response values that are in the wordlist.  Administrators are strongly encouraged\
 to leave this setting to true to make passwords a meaningful security method.\

LABEL_challenge.requiredChallenges=Required Questions
DEFLT_challenge.requiredChallenges={"":[""]}
DESCR_challenge.requiredChallenges=Required Questions for Challenge/Response.  The user must supply answers for all of these questions when \
 setting up their responses.  Additionally, answers to these questions must be suppled during forgotten password.  Use <i>%user%</i> as the question \
 text to indicate a user-supplied question.\
 <br/><br/>\
 Format: <b>question::minimumLength::maximumLength</b>\
 <table style="width: 400px">\
 <tr><td>question</td><td>The text of the challenge question</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 </table>\
 Examples:\
 <ul><li>%user%::5::200</li><li>What is your favorite cartoon?</li><li>What is your favorite food?::5::200</li></ul>
REGEX_challenge.requiredChallenges=^.+::[0-9]+::[0-9]+$

LABEL_challenge.randomChallenges=Random Questions
DEFLT_challenge.randomChallenges=\
  {"":[\
  "What is the name of the main character in your favorite book?::4::200",\
  "What is the name of your favorite teacher?::4::200",\
  "What is the name of your favorite pet?::4::200",\
  "What was the name of your childhood best friend?::4::200",\
  "What was your favorite show as a child?::4::200",\
  "Who is your favorite author?::4::200",\
  "What is your favorite food?::4::200",\
  "What is your partner's nickname?::4::200",\
  "What is your favorite team?::4::200",\
  "What street did you grow up on?::4::200",\
  "What city / town were you born in?::4::200",\
  "What is your favorite vehicle?::4::200",\
  "If you could meet someone from history, who would it be?::4::200",\
  "What is your least favorite film of all time?::4::200",\
  "Who was your least favorite teacher?::4::200",\
  "What food do you dislike the most?::4::200",\
  ]}
DESCR_challenge.randomChallenges=Random Questions for Challenge/Response.   Some of these questions will be presented to the user during \
 forgotten password - the number set in the "Minimum Password Required" setting.  The user may be required to supply answers to all or some of \
 these questions when setting up their responses.  This is controlled by the "Force All Random Response Completion" setting.  Use <i>%user%</i> as the question \
 text to indicate a user-supplied question.\
  <br/><br/>\
 Format: <b>question::minimumLength::maximumLength</b>\
 <table style="width: 400px">\
 <tr><td>question</td><td>The text of the challenge question</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 </table>\
 Examples:\
 <ul><li>%user%::5::200</li><li>What is your maiden name?::5::200</li><li>What is your fathers middle name?::5::200</li></ul>
REGEX_challenge.randomChallenges=^.+::[0-9]+::[0-9]+$

LABEL_challenge.allowSetup.queryMatch=Save Challenge Query Match
DEFLT_challenge.allowSetup.queryMatch=(objectClass=*)
DESCR_challenge.allowSetup.queryMatch=Query string used to detect if a user is a permitted to configure challenges.  The user \
 must be returned during this ldap query or else the user will not be permitted to \
 configure challenges.


#*******************************************************************************************#
#                                 Forgotten Password                                        #
#*******************************************************************************************#
CATEGORY_LABEL_RECOVERY=Forgotten Password
CATEGORY_DESCR_RECOVERY=Policies for user's forgotten password configuration.

LABEL_recovery.enable=Enable Forgotten Password
DEFLT_recovery.enable=true
DESCR_recovery.enable=If enabled, forgotten password recovery will be available to users.

LABEL_recovery.queryMatch=Forgotten Password Query Match
DEFLT_recovery.queryMatch=(objectClass=*)
DESCR_recovery.queryMatch=Query string used to detect if a user is a permitted to use the forgotten password feature.  The user \
 must be returned during this ldap query or else the user will not be permitted to recover a forgotten password.

LABEL_recovery.response.readPreference=Response Read Location
DEFLT_recovery.response.readPreference=LDAP
DEFLT-AD_recovery.response.readPreference=LDAP
DEFLT-ADDB_recovery.response.readPreference=DB
DESCR_recovery.response.readPreference=Location to read the responses from. If an option with multiple values are selected, \
  each location will be read in turn until a stored response is found.
OPTS_recovery.response.readPreference={\
  "DB":"Database",\
  "DB-LDAP":"Database, LDAP",\
  "DB-LDAP-PWMDB":"Database, LDAP, PwmDB",\
  "DB-PWMDB":"Database, PwmDB",\
  "DB-PWMDB-LDAP":"Database, PwmDB, LDAP",\
  "LDAP":"LDAP",\
  "LDAP-DB":"LDAP, Database",\
  "LDAP-DB-PWMDB":"LDAP, Database, PwmDB",\
  "LDAP-PWMDB":"LDAP, PwmDB",\
  "LDAP-PWMDB-DB":"LDAP, PwmDB, Database",\
  "PWMDB":"PwmDB",\
  "PWMDB-DB":"PwmDB, Database",\
  "PWMDB-DB-LDAP":"PwmDB, Database, LDAP",\
  "PWMDB-LDAP":"PwmDB, LDAP",\
  "PWMDB-LDAP-DB":"PwmDB, LDAP, Database"\
  }

LABEL_challenge.userAttribute=Response Storage Attribute
DEFLT_challenge.userAttribute=pwmResponseSet
DEFLT-ADDB_challenge.userAttribute=
DESCR_challenge.userAttribute=Attribute to use for response storage when storing to ldap directory.  If blank, \
  responses will not be stored in the ldap directory.  If configured, responses will be stored to the ldap directory in \
  addition to any other configured storage repositories.
REGEX_challenge.userAttribute=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_responses.storage.pwmDB=Store Responses in PwmDB
DEFLT_responses.storage.pwmDB=false
DESCR_responses.storage.pwmDB=Store user responses in the embedded PwmDB.  Responses are saved using the GUID of the user \
  as the key.  See the ldap configuration to control how the GUID is read from the directory.  The responses stored in the PwmDB can \
  be imported and exported using the PwmCommand line utility in PWM's <i>WEB-INF</i> directory.

LABEL_responses.storage.db=Store Responses in Remote Database
DEFLT_responses.storage.db=false
DEFLT-ADDB_responses.storage.db=true
DESCR_responses.storage.db=Store user responses in a traditional RDBM database via JDBC.  Responses are saved using the GUID of the user \
  as the key.  See the ldap configuration to control how the GUID is read from the directory.  Database settings must also be \
  configured to setup PWM's database integration.

LABEL_challenge.allowUnlock=Allow Unlock
DEFLT_challenge.allowUnlock=true
DESCR_challenge.allowUnlock=Allow unlock during forgotten password.  If true, and if the user's account is locked \
 due to too many invalid login attempts, and the user's password is not expired, then the \
 user will be given a chance to unlock their account instead of resetting their password.\

LABEL_challenge.storageHashed=Store PWM Responses Encrypted
DEFLT_challenge.storageHashed=true
DESCR_challenge.storageHashed=If true, the PWM responses stored will be stored as encrypted SHA1 hashed and salted values. \
  If false, the responses will be stored in plain text.  Encrypted responses are more secure, but storing the responses as \
  plain text may facilitate synchronization or migration to other systems.


LABEL_challenge.showConfirmation=Show Response Confirmation
DEFLT_challenge.showConfirmation=true
DESCR_challenge.showConfirmation=Show the responses to the user after they configure them.  This will give your users an \
 opportunity to read and review their responses before submitting, however it will show \
 the responses on the screen and make them visible to anyone else watching the users screen.

LABEL_challenge.requiredAttributes=Required Attributes
DEFLT_challenge.requiredAttributes={"":[""]}
DESCR_challenge.requiredAttributes=Required ldap attributes for challenge/response.  These attributes will be required to \
 be supplied by the user as part of the forgotten password mechanism.   The proxy user \
 will require "compare" ldap rights to thse attributes.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_challenge.requiredAttributes=^[a-zA-Z0-9]*:.+:(text|number|email|password):[0-9]*:[0-9]*:(true|false):(true|false)$

LABEL_command.checkResponses.queryMatch=Check Responses Query Match
DEFLT_command.checkResponses.queryMatch=(objectClass=*)
DESCR_command.checkResponses.queryMatch=if the command servlet is called with the checkIfResponseConfigNeeded command:\
 <br/><br/>\
 <i>/pwm/private/CommandServlet?command=checkIfResponseConfigNeeded</i>\
 <br/><br/>\
 the user is first checked to see if they match the following LDAP query before the \
 user's password responses is checked.  If the user does not match this query, then the \
 user's responses will not be checked, and the user will be redirected to the forward URL. \

LABEL_challenge.requireResponses=Require Responses
DEFLT_challenge.requireResponses=true
DESCR_challenge.requireResponses=If enabled, the user will need to supply previously saved responses in order to proceed with \
  forgotten password recovery.   If this setting is disabled, then 'Require Email Token' must be set to true for forgotten password \
  recovery to operate.

LABEL_challenge.token.enable=Require Email Token
DEFLT_challenge.token.enable=false
DESCR_challenge.token.enable=If enabled, a token will be emailed to the user during the forgotten password process.  The user \
  will be required to type the email token in order to proceed to recover their password.  If this setting is disabled, then 'Require Responses' must be set \
  to true for forgotten password recovery to operate.

LABEL_challenge.token.sendMethod=Token Send Method
DEFLT_challenge.token.sendMethod=EMAILONLY
DESCR_challenge.token.sendMethod=Set the method(s) used for sending the token code to the user.
REGEX_challenge.token.sendMethod=
OPTS_challenge.token.sendMethod={"EMAILONLY":"Email Only - Send to email address","SMSONLY":"SMS Only - Send via SMS","BOTH":"Both - Send token to both email and SMS","EMAILFIRST":"Email First - Try to send token via email; if no email address is available, send via SMS","SMSFIRST":"SMS First - Try to send token via SMS; if no SMS number is available, send via email"}



#*******************************************************************************************#
#                                 Forgotten Username                                        #
#*******************************************************************************************#

CATEGORY_LABEL_FORGOTTEN_USERNAME=Forgotten Username
CATEGORY_DESCR_FORGOTTEN_USERNAME=Allow a user to search for a forgotten username using a configurable search filter and attributes.

LABEL_forgottenUsername.enable=Enable Forgotten Username
DEFLT_forgottenUsername.enable=false
DESCR_forgottenUsername.enable=Enable forgotten username registration

LABEL_forgottenUsername.form=Forgotten Username Form
DEFLT_forgottenUsername.form={"":["mail:Email Address:email:3:50:true:false","surname:Last Name:text:2:50:true:false"]}
DESCR_forgottenUsername.form=Field(s) to be used for search for the username.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_forgottenUsername.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$


LABEL_forgottenUsername.searchFilter=Forgotten Username Search Filter
DEFLT_forgottenUsername.searchFilter=(&(objectClass=person)(mail=%mail%)(surname=%surname%))
DESCR_forgottenUsername.searchFilter=Search filter used to find username.  Each attribute \
  configured in the Forgotton Username Form should be included in the search filter.  \
  Strings encoded with a percent sign (%) will be replaced with values supplied by \
  the user.\
  <br/><br/>\
  For example, if the Forgotton Username Form included the attributes "mail" and "surname", then the \
  filter <b>(&(objectClass=person)(cn=%mail%)(surname=%surname%))</b> may be appropriate.\

LABEL_forgottenUsername.usernameAttribute=Username LDAP Attribute
DEFLT_forgottenUsername.usernameAttribute=cn
DESCR_forgottenUsername.usernameAttribute=LDAP Attribute to read as the username of the user.
REGEX_forgottenUsername.usernameAttribute=^[a-zA-Z][a-zA-Z0-9]+$


#*******************************************************************************************#
#                               New User Registration                                       #
#*******************************************************************************************#

CATEGORY_LABEL_NEWUSER=New User Registration
CATEGORY_DESCR_NEWUSER=Note: The new user registration module requires that the proxy user has sufficient permissions \
 to create users and, if so configured, to check for duplicate values.\

LABEL_newUser.enable=Enable New User Registration
DEFLT_newUser.enable=false
DESCR_newUser.enable=Enable new user registration

LABEL_newUser.createContext=Creation Context
DEFLT_newUser.createContext=ou=users,o=example
DESCR_newUser.createContext=LDAP context for new users to be created in.

LABEL_display.newuser.agreement=New User Agreement Message
DEFLT_display.newuser.agreement={"":""}
DESCR_display.newuser.agreement=<p>Message to display to user before being allowed to register a new user. \
  If blank, the new user agreement page will not be displayed to the user. \
  This message may include HTML tags.

LABEL_newUser.creationUniqueAttributes=Unique Attributes
DEFLT_newUser.creationUniqueAttributes=["cn","mail"]
DESCR_newUser.creationUniqueAttributes=Attributes that must be unique in the directory for the user to be created.  For example,\
 if the 'mail' attribute is listed here (and is in the newUser.attributes setting), then PWM \
 will not allow the new user to be created if the value for the mail attribute already \
 exists on any other user object.  This would result in all userIDs having unique email addresses.
REGEX_newUser.creationUniqueAttributes=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_newUser.writeAttributes=Write Attributes
DEFLT_newUser.writeAttributes=["description=PWM Created User"]
DESCR_newUser.writeAttributes=Attributes to be written to ldap when a user is created.  These attributes will be written \
 to the user object just after creating the object.\
 <br/><br/>\
 The format is name=value pair, multiple attributes can be specified by separating with a comma.  PwmMacros may be used.

REGEX_newUser.writeAttributes=^[a-zA-Z][a-zA-Z0-9]+=.+$

LABEL_newUser.form=New User Form
DEFLT_newUser.form={"":["mail:Email Address:email:3:50:true:false","givenName:First name:text:2:40:true:false","sn:Last name:text:2:40:true:false"]}
DESCR_newUser.form=New User form creation attributes/fields.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>\
  All required ldap attributes for user entry creation must be included on this form.\
  Unless using automatically generated username (default), the values for the ldap naming attribute (such as cn, uid or sAMAccountName) must \
  be included in the form.

REGEX_newUser.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$

LABEL_newUser.deleteOnFail=Delete On Creation Failure
DEFLT_newUser.deleteOnFail=true
DESCR_newUser.deleteOnFail=If the new user account creation fails for some reason, delete the (potentially partially-created) "broken" account in ldap.

LABEL_newUser.username.characters=Random Username Characters
DEFLT_newUser.username.characters=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
DESCR_newUser.username.characters=Available characters for the new username.  If blank, PWM will not generate a random username and the ldap naming attribute must \
  be included in the form.

LABEL_newUser.username.length=Random Username Length
DEFLT_newUser.username.length=16
DESCR_newUser.username.length=Length of the new username.  If set to 0, PWM will not generate a random username and the ldap naming attribute must \
  be included in the form.

LABEL_newUser.email.verification=Enable New User Email Verification
DEFLT_newUser.email.verification=true
DESCR_newUser.email.verification=If true, an email will be sent to the new user's email address before the account is created.  The \
  NewUser must verify receipt of the email before the account will be created.

LABEL_newUser.passwordPolicy.user=New User Password Policy Template
DEFLT_newUser.passwordPolicy.user=TESTUSER
DESCR_newUser.passwordPolicy.user=User to use as template for password policy.  PWM will read the configured user's password policy \
  and use that on the new user password page.  If the value is <i>TESTUSER</i>, PWM will use the configured test user's password policy. \
  If the value is blank, then the configured PWM password policy will be used.

LABEL_newUser.minimumWaitTime=New User Minimum Wait Time
DEFLT_newUser.minimumWaitTime=10
DESCR_newUser.minimumWaitTime=During a new user creation, PWM will wait for at least this amount of time before forwarding \
  the user.  \
  <br/><br/>\
  Value is specified in seconds.

LABEL_ldap.defaultObjectClasses=Default Object Classes on Create
DEFLT_ldap.defaultObjectClasses=["inetOrgPerson"]
DESCR_ldap.defaultObjectClasses=Object class(es) to use for newly created users. \
 Typically this is the standard inetOrgPerson class, but this could also be an extended class that \
 inherits inetOrgPerson or some of it's attributes and/or other classes.
REGEX_ldap.defaultObjectClasses=^[a-zA-Z][a-zA-Z0-9]+$


#*******************************************************************************************#
#                                  Guest Registration                                       #
#*******************************************************************************************#

CATEGORY_LABEL_GUEST=Guest Registration
CATEGORY_DESCR_GUEST=Note: The guest user registration module requires that the logged in user has sufficient permissions \
 to create users and, if so configured, to check for duplicate values.\

LABEL_guest.enable=Enable Guest Registration
DEFLT_guest.enable=false
DESCR_guest.enable=Enable guest registration

LABEL_guest.createContext=Creation Context
DEFLT_guest.createContext=ou=guests,o=example
DESCR_guest.createContext=LDAP context for new guest accounts to be created in.

LABEL_guest.adminGroup=Guest Admin Query String
DEFLT_guest.adminGroup=(groupMembership=cn=useradmins,ou=groups,o=example)
DESCR_guest.adminGroup=Query string used to detect if a user is a guest administrator. An LDAP query is performed during pwm login against the logged in user to determine if the user is a guest administrator. If the user matches the query, then the user is considered a guest administrator. 

LABEL_guest.creationUniqueAttributes=Unique Attributes
DEFLT_guest.creationUniqueAttributes=["cn","mail"]
DESCR_guest.creationUniqueAttributes=Attributes that must be unique in the directory for the guest user to be created.  For example,\
 if the 'mail' attribute is listed here (and is in the guest.attributes setting), then PWM \
 will not allow the new guest user to be created if the value for the mail attribute already \
 exists on any other user object.  This would result in all userIDs having unique email addresses.
REGEX_guest.creationUniqueAttributes=^[a-zA-Z][a-zA-Z0-9]+$

LABEL_guest.writeAttributes=Write Attributes
DEFLT_guest.writeAttributes=["description=PWM Created Guest User"]
DESCR_guest.writeAttributes=Attributes to be written to ldap when a guest user is created.  These attributes will be written \
 to the user object just after creating the object.\
 <br/><br/>\
 format is name=value pair, multiple attributes can be specified by separating with a comma.  PwmMacros may be used.
REGEX_guest.writeAttributes=^[a-zA-Z][a-zA-Z0-9]+=.+$

LABEL_guest.adminAttribute=Administrator DN Attribute
DEFLT_guest.adminAttribute=manager
DESCR_guest.adminAttribute=Attribute in which the DN of the logged in user will be written to in ldap \
 when a guest user is created. \
 This attribute will be written to the user object just after creating the object.

LABEL_guest.editOriginalAdminOnly=Edit Guest By Original Administrator Only
DEFLT_guest.editOriginalAdminOnly=false
DESCR_guest.editOriginalAdminOnly=When set to true, only the guest administrator who created the guest account \
  will be allowed to update the guest account details.

LABEL_guest.form=New Guest Form
DEFLT_guest.form={"":["cn:Username:text:2:10:true:false","givenName:First name:text:4:40:true:false","sn:Last name:text:4:40:true:false","mail:Email Address:email:3:50:true:true","telephoneNumber:Telephone Number:text:7:10:true:false"]}
DESCR_guest.form=New Guest form creation attributes/fields.\
  <br/><br/>\
 The values for cn and sn attributes typically required by directories, so they should be included here.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value<br/>readonly - view-only value read from ldap</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_guest.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|random|readonly|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$

LABEL_guest.update.form=Update Guest Form
DEFLT_guest.update.form={"":["cn:Username:readonly:1:10:false:false","givenName:First name:text:4:40:true:false","sn:Last name:text:4:40:true:false","mail:Email Address:email:3:50:true:false","telephoneNumber:Telephone Number:text:7:10:true:false"]}
DESCR_guest.update.form=New Guest form creation attributes/fields.\
  <br/><br/>\
 The values for cn and sn attributes typically required by directories, so they should be included here.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value<br/>readonly - view-only value read from ldap</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_guest.update.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|random|readonly|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$

LABEL_guest.maxValidDays=Maximum Duration of Account Validity
DEFLT_guest.maxValidDays=30
DESCR_guest.maxValidDays=The maximum number of days before the account will be disabled.   The guest administrator may use a calendar widget \
  to select an expiration date, which must be within the account validity window.  If this value is zero, the guest administrator is not prompted \
  for an expiration date and no expiration date is recorded on the user.

LABEL_guest.expirationAttribute=Attribute Used To Store Account Expiration Date
DEFLT_guest.expirationAttribute=loginExpirationTime
DESCR_guest.expirationAttribute=The attribute used to store the account expiration date.  If this value is blank, the guest administrator is not prompted \
  for an expiration date and no expiration date is recorded on the user.

#*******************************************************************************************#
#                                User Activation                                            #
#*******************************************************************************************#
CATEGORY_LABEL_ACTIVATION=User Activation
CATEGORY_DESCR_ACTIVATION=The user activation module allows users to activate an account \
  they have not previously authenticated to.  The user does not need to know the password \
  to activate the account.

LABEL_activateUser.enable=Enable User Activation
DEFLT_activateUser.enable=false
DESCR_activateUser.enable=Enable the new user activation module.

LABEL_activateUser.token.verification=Enable Token Verification
DEFLT_activateUser.token.verification=false
DESCR_activateUser.token.verification=Send the user a token during activation, and require the value to be entered (or clicked) \
  during the activation process.

LABEL_display.activateUser.agreement=Activate User Agreement Message
DEFLT_display.activateUser.agreement={"":""}
DESCR_display.activateUser.agreement=<p>Message to display to user before being allowed to activate their account. \
  If blank, the activate user agreement page will not be displayed to the user. \
  This message may include HTML tags.

LABEL_activateUser.form=Activate User Form
DEFLT_activateUser.form={"":["cn:Username:text:2:32:true:false","sn:Last Name:text:2:32:true:false"]}
DESCR_activateUser.form=Form fields for activate user module.  Each attribute will be \
 required to be entered by the user.  Ideally, the user will be required to enter some \
 personal data that is not publicly known.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_activateUser.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$

LABEL_activateUser.searchFilter=Activation Search Filter
DEFLT_activateUser.searchFilter=(&(objectClass=person)(cn=%cn%))
DESCR_activateUser.searchFilter=Search filter used to find user during user activation.  Each attribute \
  configured in the Activate User Form should be included in the search filter.  \
  Strings encoded with a percent sign (%) will be replaced with values supplied by \
  the user.\
  <br/><br/>\
  For example, if the Activate User Form included the attributes "cn" and "surname", then the \
  filter <b>(&(objectClass=person)(cn=%cn%)(surname=%surname%))</b> may be appropriate.\
  <br/><br/>\
  Any attributes that are listed in the form but are not used in the search filter will \
  tested by attempting an ldap compare with the user supplied value.

LABEL_activateUser.queryMatch=Activation Query Match
DEFLT_activateUser.queryMatch=(&(loginDisabled=true)(!(vehicleInformation=pwmActivated)))
DESCR_activateUser.queryMatch=Only allow users who match this query to be activated.  Generally, you will \
 only allow users who's accounts are disabled and have not been previously activated \
 to be activated.  The default example uses the "vehicleInformation" attribute on \
 the user object because it is a rarely used attribute available in the default \
 schema, but any attribute can be used for this.\

LABEL_activateUser.writePreAttributes=Activation Write Attributes (Before Password Change)
DEFLT_activateUser.writePreAttributes=["loginDisabled=false"]
DESCR_activateUser.writePreAttributes=Writes attributes to ldap after a user is activated but before the password is set.  Typically this is \
 used to activate the account, as well as put some searchable indicator \
 <br/><br/>\
 The format is name=value pair, multiple attributes can be specified by separating with a comma.  PwmMacros may be used.
REGEX_activateUser.writePreAttributes=^[a-zA-Z][a-zA-Z0-9]*=.+$

LABEL_activateUser.writePostAttributes=Activation Write Attributes (After Password Change)
DEFLT_activateUser.writePostAttributes=["vehicleInformation=pwmActivated"]
DESCR_activateUser.writePostAttributes=Writes attributes to ldap after a user is activated and has changed/set their initial password.  Typically this is \
 used to activate the account, as well as put some searchable indicator \
 <br/><br/>\
 The format is name=value pair, multiple attributes can be specified by separating with a comma.  PwmMacros may be used.
REGEX_activateUser.writePostAttributes=^[a-zA-Z][a-zA-Z0-9]*=.+$

LABEL_activateUser.token.sendMethod=Token Send Method
DEFLT_activateUser.token.sendMethod=EMAILONLY
DESCR_activateUser.token.sendMethod=Set the method(s) used for sending the token code to the user.
REGEX_activateUser.token.sendMethod=
OPTS_activateUser.token.sendMethod={"EMAILONLY":"Email Only - Send to email address","SMSONLY":"SMS Only - Send via SMS","BOTH":"Both - Send token to both email and SMS","EMAILFIRST":"Email First - Try to send token via email; if no email address is available, send via SMS","SMSFIRST":"SMS First - Try to send token via SMS; if no SMS number is available, send via email"}


#*******************************************************************************************#
#                                Update Profile                                             #
#*******************************************************************************************#
CATEGORY_LABEL_UPDATE=Update Profile
CATEGORY_DESCR_UPDATE=The update user profile module will force/allow the user to update the attributes \
 configured here.  This is useful for forcing the user to populate to update some \
 piece of information while they are using PWM.

LABEL_updateAttributes.enable=Enable Update Profile
DEFLT_updateAttributes.enable=false
DESCR_updateAttributes.enable=Enable Update Profile Attributes.  If true, the Update Profile module will be enabled.

LABEL_updateAttributes.forceSetup=Force Update Profile
DEFLT_updateAttributes.forceSetup=false
DESCR_updateAttributes.forceSetup=If true, the Update Profile module will be presented to the user before the user leaves PWM if the \
  Update Check Query Match setting evaluation returns true.

LABEL_display.updateAttributes.agreement=Update Profile Agreement Message
DEFLT_display.updateAttributes.agreement={"":""}
DESCR_display.updateAttributes.agreement=<p>Message to display to user before being allowed to update their profile. \
  If blank, the update profile agreement page will not be displayed to the user. \
  This message may include HTML tags.

LABEL_updateAttributes.queryMatch=Update Query Match
DEFLT_updateAttributes.queryMatch=(objectClass=person)
DESCR_updateAttributes.queryMatch=Only allow users who match this query to be update their profile.

LABEL_updateAttributes.writeAttributes=Update Write Attributes
DEFLT_updateAttributes.writeAttributes=["description=PWM "]
DESCR_updateAttributes.writeAttributes=Writes attributes to ldap after a user's attributes are populated.  Typically \
 this is used to put some searchable indicator on the user object.\
 <br/><br/>\
 format is attributeName=value.  PwmMacros may be used.
REGEX_updateAttributes.writeAttributes=^[a-zA-Z][a-zA-Z0-9]*=.+$

LABEL_updateAttributes.form=Update Profile Form
DEFLT_updateAttributes.form={"":["telephoneNumber:Telephone Number:text:3:15:true:false","title:Title:text:2:15:true:false"]}
DESCR_updateAttributes.form=Update Profile Form values.\
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value<br/>readonly - view-only value read from ldap</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_updateAttributes.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|readonly|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$

LABEL_updateAttributes.check.queryMatch=Update Check Query Match
DEFLT_updateAttributes.check.queryMatch=
DESCR_updateAttributes.check.queryMatch=When the "checkProfile" or "checkAll" parameter is used with the command servlet, \
  this query match will be used to determine if the user should be required to populate the param values. \
  <br/><br/>If this value is blank, then PWM will check that the current values meet the form requirements.

LABEL_updateAttributes.showConfirmation=Show Update Profile Confirmation
DEFLT_updateAttributes.showConfirmation=true
DESCR_updateAttributes.showConfirmation=Show the update attributes to the user after they configure them.  This will give your users an \
 opportunity to read and review their attributes before submitting, however it will show \
 the responses on the screen and make them visible to anyone else watching the users screen.


#*******************************************************************************************#
#                                 Shortcut Settings                                         #
#*******************************************************************************************#
CATEGORY_LABEL_SHORTCUT=Shortcut Menu
CATEGORY_DESCR_SHORTCUT=The shortcut menu is used to display a list of click-able links to users.  This functionality \
  may be useful as a basic landing page for users.

LABEL_shortcut.enable=Enable Shortcuts 
DEFLT_shortcut.enable=false
DESCR_shortcut.enable=Enable the shortcuts module.

LABEL_shortcut.items=Shortcut Items
DEFLT_shortcut.items={"":["Google::http:\/\/www.google.com::(objectClass=inetOrgPerson)::Google Search","Example::http:\/\/www.Example.com::(&(objectClass=inetOrgPerson)(cn=n*))::Example Page","Yahoo::http:\/\/www.yahoo.com::(objectClass=inetOrgPerson)::Yahoo Home Page"]}

DESCR_shortcut.items=List of available shortcuts.\
    <br/><br/>\
   Format: <b>label::url::ldapQuery::description</b>\
   <table style="width: 400px">\
   <tr><td>label</td><td>Label to show to user</td></tr>\
   <tr><td>ldapQuery</td><td>Valid ldap syntax style query, if the user matches this query, then the shortcut will be shown to the user.</td></tr>\
   <tr><td>url</td><td>http shortcut to direct the user to</td></tr>\
   <tr><td>description</td><td>Long description of the shortcut</td></tr>\
   </table>
REGEX_shortCutItem=^[a-zA-Z][a-zA-Z0-9]+::.+::.+::.+$

LABEL_shortcut.httpHeaders=Shortcut Headers
DEFLT_shortcut.httpHeaders=["X-PWM-Shortcuts"]
DESCR_shortcut.httpHeaders=HTTP Headers to use to control the visible list of shortcuts.  If this header is present, PWM will use the \
  values to determine which of the configured shortcuts are available to a user.  Values must correspond to the label values specified \
  as part of the shortcut items.  When this header is present, PWM will not use the ldapQuery portion of the shortcut items and will instead \
  display shortcuts only if the labbel is present in the header.\
  <br/><br/>\
  Values can be set in multiple headers, or by comma separating the values.\
  <br/><br/>\
  A blank value will disable this feature.




#*******************************************************************************************#
#                                 PeopleSearch Settings                                         #
#*******************************************************************************************#
CATEGORY_LABEL_PEOPLE_SEARCH=People Search
CATEGORY_DESCR_PEOPLE_SEARCH=People Search

LABEL_peopleSearch.enable=Enable PeopleSearch
DEFLT_peopleSearch.enable=false
DESCR_peopleSearch.enable=Enable the PeopleSearch module.

LABEL_peopleSearch.queryMatch=PeopleSearch Query Match
DEFLT_peopleSearch.queryMatch=(objectClass=*)
DESCR_peopleSearch.queryMatch=If configured, this query match controls if a user may access the PeopleSearch module.  The \
  user must match this ldap filter to be able to use the PeopleSearch module.

LABEL_peopleSearch.searchFilter=Search filter
DEFLT_peopleSearch.searchFilter=(&(objectClass=inetOrgPerson)(|(cn=*%USERNAME%*)(givenName=*%USERNAME%*)(sn=*%USERNAME%*)(mail=*%USERNAME%*)(telephoneNumber=*%USERNAME%*)))
DESCR_peopleSearch.searchFilter=LDAP search filter to query the directory with.  Substitute <i>%USERNAME</i> for user supplied username

LABEL_peopleSearch.searchBase=LDAP Search base
DEFLT_peopleSearch.searchBase=
DESCR_peopleSearch.searchBase=If empty, the default ldap search base will be used.

LABEL_peopleSearch.result.form=PeopleSearch Result Form
DEFLT_peopleSearch.result.form={"":["givenName:First Name:text:1:50:true:false","sn:Last Name:text:1:50:true:false","mail:Email:email:1:50:true:false","telephoneNumber:Telephone:text:1:50:true:false"]}
DESCR_peopleSearch.result.form=Field(s) to be shown as a result to searches.  (Fields will always be read-only)
  <br/><br/>\
 Format: <b>attributeName:label:type:minimumLength:maximumLength:required:confirm</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 <tr><td>type</td><td>One of the following: <br/>text - text value<br/>tel - telephone number<br/>number - numeric value<br/>email - regular string with email format validation<br/>password - password or sensitive value</td></tr>\
 <tr><td>minimumLength</td><td>Minimum Field Length</td></tr>\
 <tr><td>maximumLength</td><td>Maximum Field Length</td></tr>\
 <tr><td>required</td><td>Field is required</td></tr>\
 <tr><td>confirm</td><td>Field must be confirmed (with a duplicate field)</td></tr>\
 </table>
REGEX_peopleSearch.result.form=^[a-zA-Z0-9]+:.+:(text|tel|number|email|password|readonly|hidden):[0-9]+:[0-9]+:(true|false):(true|false)$


LABEL_peopleSearch.result.limit=PeopleSearch result limit
DEFLT_peopleSearch.result.limit=25
DESCR_peopleSearch.result.limit=result limit

LABEL_peopleSearch.useProxy=Use proxy account
DEFLT_peopleSearch.useProxy=false
DESCR_peopleSearch.useProxy=Use ldap proxy account to perform searches.  For proper security in most environments \
  this setting should <b>not</b> be enabled.

#*******************************************************************************************#
#                                     Password Reset                                        #
#*******************************************************************************************#
CATEGORY_LABEL_HELPDESK=Helpdesk
CATEGORY_DESCR_HELPDESK=Configurations for administrative helpdesk.

LABEL_helpdesk.enable=Enable Helpdesk Module
DEFLT_helpdesk.enable=false
DESCR_helpdesk.enable=Enable Helpdesk Module

LABEL_helpdesk.queryMatch=Helpdeskt Query Match
DEFLT_helpdesk.queryMatch=(groupMembership=cn=PwmAdmins,ou=Groups,o=example)
DESCR_helpdesk.queryMatch=LDAP query string used to detect if logged in user is permitted to access the helpdesk module.  The user must be \
 returned during this is ldap query or else the user will not be permitted to access the helpdesk module.

LABEL_helpdesk.enforcePasswordPolicy=Enforce PWM Password Policy
DEFLT_helpdesk.enforcePasswordPolicy=true
DESCR_helpdesk.enforcePasswordPolicy=Require that passwords set by helpdesk must meet the same password policy as the user would normally be \
  constrained by.

LABEL_helpdesk.displayAttributes=User Attributes
DEFLT_helpdesk.displayAttributes=["cn:CN","uid:UID","givenname:Given Name","initials:Initials","sn:Surname","fullname:Full Name","preferredName:Preferred Name","mail:Email","title:Title","telephoneNumber:Telephone Number","employeeStatus:Employee Status","workforceID:Workforce ID"]
DESCR_helpdesk.displayAttributes=List of user LDAP attributes to display to the heldesk user.  These attributes can be used by the helpdesk to verify the user identity.  The logged in user must have the appropriate ldap permissions to read these values.\
  <br/><br/>\
 Format: <b>attributeName:label</b>\
 <table style="width: 400px">\
 <tr><td>attributeName</td><td>Name of ldap attribute</td></tr>\
 <tr><td>label</td><td>Label to show to user</td></tr>\
 </table>

LABEL_helpdesk.setPassword.mode=Set Password UI Mode
DEFLT_helpdesk.setPassword.mode=autogen
DESCR_helpdesk.setPassword.mode=Mode to allow helpdesk administrators to set passwords.  (Note the logged-in user must have proper ldap permissions.)
OPTS_helpdesk.setPassword.mode={"none":"None", "type":"Type", "autogen":"Auto Generate", "both":"Both"}

LABEL_helpdesk.enableUnlock=Enable Unlock
DEFLT_helpdesk.enableUnlock=true
DESCR_helpdesk.enableUnlock=Enable helpdesk module users to unlock an (intruder) locked account.

LABEL_helpdesk.context=User LDAP context
DEFLT_helpdesk.context=
DESCR_helpdesk.context=Base LDAP context of users to be managed.  If blank, the default context is used.

LABEL_helpdesk.idleTimeout=Idle Timeout Seconds for HelpdeskUsers
DEFLT_helpdesk.idleTimeout=3600
DESCR_helpdesk.idleTimeout=Number of seconds after which an authenticated session becomes unauthenticated.   Pwm Session Idle timeout will \
  be set to this value once a user successfully access the helpdesk module.

LABEL_helpdesk.clearResponses=Clear Responses on Password Set
DEFLT_helpdesk.clearResponses=ask
DESCR_helpdesk.clearResponses=Mode to allow helpdesk administrators to set passwords.  (Note the logged-in user must have proper ldap permissions.)
OPTS_helpdesk.clearResponses={"yes":"True", "ask":"Ask", "no":"False"}


#*******************************************************************************************#
#                                  Database Configuration                                   #
#*******************************************************************************************#
CATEGORY_LABEL_DATABASE=Database
CATEGORY_DESCR_DATABASE=Optional database configuration settings.  Two types of databases are used by PWM.\
  <h2>PwmDB</h2>The PwmDB is a local, embedded database that is used by PWM for storage of local data.  In \
  most cases, the PwmDB requires no administration or maintenance, and the defaults are sufficient. \
  <h2>RDBMS Database</h2> \
  If configured, PWM can use a traditional RDBMS database to store data for certain functions.  Any standard RDBMS that supports a standard \
  Java JDBC driver can work.  Upon startup, PWM will connect to the database and create any \
  necessary tables.  Multiple PWM server instances can be configured for the same database instance.

LABEL_pwmDb.location=PwmDB Location
DEFLT_pwmDb.location=pwmDB
DESCR_pwmDb.location=Location of the PwmDB directory. If the specified path is relative, the path will be considered relative to the servlet's <i>WEB-INF</i> directory.

LABEL_pwmDb.implementation=PwmDB Implementation Class
DEFLT_pwmDb.implementation=password.pwm.util.pwmdb.Berkeley_PwmDb
DESCR_pwmDb.implementation=Java class implementation used by PwmDB.  Default is the embedded BerkeleyDB Java Edition.

LABEL_pwmDb.initParameters=PwmDB Initialization String
DEFLT_pwmDb.initParameters=["je.maxMemory=10000000","je.cleaner.minUtilization=70"]
DESCR_pwmDb.initParameters=Value passed to the pwmDbImplementation class during initialization.  Value format is specific to the implementation.

LABEL_db.classname=Database Class
DEFLT_db.classname=
DESCR_db.classname=Database class name.  The Java JDBC full driver class name.  The corresponding JDBC drivar JAR or ZIP \
  file must be included in PWM's classpath, typically in PWM's <i>WEB-INF/lib</i> or the application server's lib directory.

LABEL_db.url=Database Connection String
DEFLT_db.url=
DESCR_db.url=Database connection string in standard JDBC format.

LABEL_db.username=Database Username
DEFLT_db.username=
DESCR_db.username=Database username

LABEL_db.password=Database Password
DEFLT_db.password=
DESCR_db.password=Database password


#*******************************************************************************************#
#                                        Advanced                                           #
#*******************************************************************************************#
CATEGORY_LABEL_MISC=Integration / Developer
CATEGORY_DESCR_MISC=Settings that are of interest to developers or component integrators.


LABEL_externalChangeMethod=External Change Method
DEFLT_externalChangeMethod=[""]
DESCR_externalChangeMethod=Java classes to call after a successful password change.  These \
 classes may take such actions as updating passwords in other systems or updating \
 eDirectory.  External password classes must implement the interface <i>password.pwm.ExternalChangeMethod</i>.\
 <br/><br/>\
 Unless your adding custom Java code to PWM, you should leave this blank.

LABEL_externalRestChangeMethod=External REST Change Method
DEFLT_externalRestChangeMethod=[""]
DESCR_externalRestChangeMethod=URLs to call after a successful password change.  These \
 classes may take such actions as updating passwords in other systems or updating \
 eDirectory.   The URL will be invoked with the HTTP GET action.  PwmMacros can be used to \
 add user data.  %PASSWORD% and %OLD_PASSWORD% replacement strings are available.  The HTTP \
 request will be issued by the PWM servlet, not by the browser.


LABEL_externalJudgeMethod=External Judge Method
DEFLT_externalJudgeMethod=["password.pwm.PwmPasswordJudge"]
DESCR_externalJudgeMethod=Java classes to call to determine the strength of a given password.  \
  External judge methods must implement the interface <i>password.pwm.ExternalJudgeMethod</i>. \
  During password judge checks, pwm will call all listed judge classes.  If multiple results \
  are returned, the lowest returned value will be used as the result.

LABEL_externalRuleMethod=External Rule Method
DEFLT_externalRuleMethod=[""]
DESCR_externalRuleMethod=Java classes to call to determine any rule violations of a given password.  \
  External rule methods must implement the interface <i>password.pwm.ExternalRuleMethod</i>.\
 <br/><br/>\
 Unless your adding custom Java code to PWM, you should leave this blank.

LABEL_disallowedInputs=Disallowed HTTP Inputs
DEFLT_disallowedInputs=["(?i)<.*script.*>","(?i)<.*xml.*>*","(?i)<.*img.*>","(?i)<.*src.*>","(?i).*href.*"]
DESCR_disallowedInputs=Disallowed values.  If any input values (on any http parameter) matches these patterns, the \
  matching portion will be stripped from the input.

LABEL_ldapChaiSettings=LDAP Chai Settings
DEFLT_ldapChaiSettings=[""]
DESCR_ldapChaiSettings=Name/Value settings to control the behavior of the <a href="http://code.google.com/p/ldapchai">LDAP \
  Chai API</a>.  The settings must be in "name=value" format, where name is the key value of a valid \
  <a href="http://ldapchai.googlecode.com/svn/trunk/javadoc/com/novell/ldapchai/provider/ChaiSetting.html">ChaiSetting</a>.
REGEX_ldapChaiSettings=^chai\\.[a-zA-Z0-9.]*=.+$

LABEL_wordlistCaseSensitive=Wordlist Case Sensitivity
DEFLT_wordlistCaseSensitive=false
DESCR_wordlistCaseSensitive=If true, the wordlist will be treated as case sensitive for all matches. Changing this value will cause the wordlist to be recompiled.

LABEL_email.smtp.advancedSettings=SMTP Email Advanced Settings
DEFLT_email.smtp.advancedSettings=[""]
DESCR_email.smtp.advancedSettings=Name/Value settings to control the behavior of the mail agent.\
  Available settings are defined as part of the <a href="http://java.sun.com/products/javamail/javadocs/com/sun/mail/smtp/package-summary.html">JavaMail API</a>. \
  The settings must be in "name=value" format, where name is the key value of a valid JavaMail API setting.
REGEX_email.smtp.advancedSettings=^[a-zA-Z0-9.]+=.+$

LABEL_http.proxy.url=HTTP Proxy
DEFLT_http.proxy.url=
DESCR_http.proxy.url=The url of the HTTP proxy server.  If blank, no proxy server will be used.\
   <ul><li>For http proxy server, use "<i>http://serverame:3128</i>" format</li>\
   <li>For authenticated proxy server, use the "<i>http://username:password@servername:3128</i>" format</ul></li>\
   <br/>
REGEX_http.proxyserver=^http://$

LABEL_display.hideConfigHealthWarnings=Hide Configuration Health Warnings
DEFLT_display.hideConfigHealthWarnings=false
DESCR_display.hideConfigHealthWarnings=Hide health warnings about configuration issues from the health status monitors.

LABEL_cas.clearPassUrl=CAS ClearPass URL
DEFLT_cas.clearPassUrl=
DESCR_cas.clearPassUrl=For <a href="http://www.jasig.org/cas">CAS</a> authentication integration, enter the \
  ClearPass url here.  If blank, CAS authentication integration will be disabled.\
  <br/><br/>\
  You will also need to edit the <i>WEB-INF/web.xml</i> file to enable CAS integration.  Uncomment the section \
  for the CAS servlet filters, and modify the CAS servlet parameters as appropriate for your configuration.

LABEL_urlshortener.classname=Enable URL Shortening Service Class
DEFLT_urlshortener.classname=
DESCR_urlshortener.classname=URL Shortening Service class name. The Java full class name that implements \
  a short url service. The corresponding JAR or ZIP file must be included in PWM's classpath, \
  typically in PWM's <i>WEB-INF/pwm</i> or the application server's lib directory.

LABEL_urlshortener.regex=Regular Expression for Matching URLs
DEFLT_urlshortener.regex=(https?://([^:@]+(:[^@]+)?@)?([a-zA-Z0-9\\.]+|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\[[0-9a-fA-F:]+\\])(:\\d{1,5})?/*[a-zA-Z0-9/\\\\%_.]*\\?*[a-zA-Z0-9/\\\\%_.=&#]*)
DESCR_urlshortener.regex=Enter a regular expression to be used for matching URLs to be shortened by the URL Shortening Service Class

LABEL_urlshortener.parameters=Configuration Parameters for URL Shortening Service
DEFLT_urlshortener.parameters=[""]
DESCR_urlshortener.parameters=Name/Value settings used to configure the selected URL shortening service, like \
  for example an API key, username, password or domain name. \
  The settings must be in "name=value" format, where name is the key value of a valid service setting.
REGEX_urlshortener.parameters=^[a-zA-Z0-9.]+=.+$

LABEL_external.webservices.enable=Enable External Web Services
DEFLT_external.webservices.enable=false
DESCR_external.webservices.enable=Allow public use of the PWM web services.  When false, the PWM form nonce is required for all web services.  The form nonce is difficult (though not impossible) for \
 a client to retreive programmatically.  Therefore it is difficult, though not impossible to use the web services.  When true, the form nonce is not required to invoke the PWM web services.

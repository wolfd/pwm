<!--
  ~ Password Management Servlets (PWM)
  ~ http://code.google.com/p/pwm/
  ~
  ~ Copyright (c) 2006-2009 Novell, Inc.
  ~ Copyright (c) 2009-2012 The PWM Project
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  -->

<project default="makeWAR" name="PWM Build Script">
    <target name="init">
        <property file="build.properties"/>
        <echo>PWM Build Script</echo>
        <echo> current directory: ${basedir}</echo>
        <echo> ant version: ${ant.version}</echo>
        <echo> java version: ${ant.java.version}</echo>
        <echo> </echo>
        <echo>settings:</echo>
        <echo> svn source: ${svn.url}</echo>
        <echo> work directory: ${work.root}</echo>
        <echo> artifact destination: ${artifacts.root}</echo>
        <echo> build lib: ${build.lib}</echo>

        <property name="svnExportDir" value="${work.root}/${work.svncheckout}"/>
        <property name="svnTempDir" value="${work.root}/${work.temp}"/>
        <property name="sourceDir" value="${svnExportDir}/${svn.path}/src"/>
        <property name="compileOutput" value="${work.root}/${work.binaries}"/>
        <property name="explodedWarDir" value="${artifacts.root}/${artifacts.exploded}"/>
        <property name="buildFilename" value="${work.root}/${work.binaries}/password/pwm/BuildInformation.properties"/>
        <property name="svnSrcDir" value="${svnExportDir}/${svn.path}"/>
        <property name="javaDocOutput" value="${work.root}/${work.javadoc}"/>
    </target>

    <target name="clean" depends="init,cleanWork,cleanArtifacts">
    </target>
    <target name="cleanWork" depends="init">
        <delete dir="${work.root}"/>
    </target>
    <target name="cleanArtifacts" depends="init">
        <delete dir="${artifacts.root}"/>
    </target>

    <target name="svnInit" depends="init">
        <typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
            <classpath>
                <fileset dir="${build.lib}/ant" includes="*.jar"/>
            </classpath>
        </typedef>
        <svnSetting javahl="false" svnkit="true" username="${svn.username}" password="${svn.password}" id="svn.settings"/>
        <echo> svn source: ${svn.url}</echo>
    </target>

    <target name="svnExport" depends="init,svnInit">


        <echo>Beginning export of ${svn.url}</echo>
        <mkdir dir="${svnExportDir}"/>
        <svn refid="svn.settings">
            <checkout url="${svn.url}" destpath="${svnExportDir}" recurse="true"/>
        </svn>
        <echo>SVN Checkout Complete</echo>
    </target>

    <target name="svnRevisionRead" depends="init,svnInit">
        <delete dir="${svnTempDir}"/>
        <mkdir dir="${svnTempDir}"/>
        <svn refid="svn.settings"> <!-- single checkout to determine revision -->
            <checkout url="${svn.url}" destpath="${svnTempDir}" recurse="false"/>
            <status path="${svnTempDir}" revisionproperty="svn.revision"/>
        </svn>
        <property name="svnRevisionNumber" value="${svn.revision}"/>
        <echo>Read revision ${svnRevisionNumber}</echo>
        <delete dir="${svnTempDir}"/>
    </target>

    <target name="compileCode" depends="init,svnExport">
        <mkdir dir="${compileOutput}"/>
        <javac srcdir="${sourceDir}" destdir="${compileOutput}" debug="true" target="1.6" source="1.6">
            <classpath>
                <fileset dir="${sourceDir}/../web/WEB-INF/lib" includes="*.jar"/>
                <fileset dir="${build.lib}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="writeBuildInfo" depends="svnRevisionRead,compileCode">
        <propertyfile file="${buildFilename}">
            <entry key="build.java.vendor" value="${java.vendor}"/>
            <entry key="build.java.version" value="${java.version}"/>
            <entry key="build.time" type="date" value="now" pattern="yyyy.MM.dd HH:mm:ss z"/>
            <entry key="build.user" value="${user.name}"/>
            <entry key="build.revision" value="${svnRevisionNumber}"/>
        </propertyfile>
        <!--
        <buildnumber file="${buildFilename}"/>
        <echo>build number: ${build.number}</echo>
        -->
    </target>

    <target name="makeJAR" depends="compileCode,writeBuildInfo">
        <jar destfile="${artifacts.root}/${artifacts.jar}">
            <fileset dir="${compileOutput}"/>
            <zipfileset dir="${sourceDir}" prefix="src"/>
            <zipfileset dir="${sourceDir}" includes="**/*.properties"/>
            <zipfileset dir="${sourceDir}" includes="**/*.xml"/>
            <manifest>
                <attribute name="Main-Class" value="password.pwm.util.JarMain"/>
            </manifest>
        </jar>
    </target>

    <target name="makeExplodedWar" depends="makeJAR">
        <mkdir dir="${explodedWarDir}"/>
        <copy todir="${explodedWarDir}">
            <fileset dir="${svnExportDir}/${svn.path}/web"/>
        </copy>
        <copy todir="${explodedWarDir}/WEB-INF/lib">
            <fileset file="${artifacts.root}/${artifacts.jar}"/>
        </copy>
    </target>

    <target name="makeWAR" depends="makeExplodedWar">
        <war zipfile="${artifacts.root}/${artifacts.war}" webxml="${explodedWarDir}/WEB-INF/web.xml">
            <zipfileset dir="${explodedWarDir}"/>
        </war>
    </target>

    <target name="javadoc" depends="svnExport">
        <mkdir dir="${javaDocOutput}"/>
        <javadoc packagenames="password.pwm.*"
                 sourcepath="${svnExportDir}/${svn.path}/src"
                 destdir="${javaDocOutput}"
                 private="yes" source="1.6">
            <link href="http://docs.oracle.com/javase/6/docs/api/"/>
            <link href="http://download.oracle.com/docs/cd/E17802_01/products/products/servlet/2.3/javadoc/"/>
            <link href="http://ldapchai.googlecode.com/svn/trunk/javadoc/"/>
            <classpath>
                <fileset dir="${svnExportDir}/${svn.path}/web/WEB-INF/lib" includes="*.jar"/>
                <fileset dir="build_lib" includes="*.jar"/>
            </classpath>
        </javadoc>
    </target>

    <target name="makeZIP" depends="makeWAR,javadoc">
        <zip zipfile="${artifacts.root}/${artifacts.zip}" filesonly="true">
            <zipfileset file="${artifacts.root}/${artifacts.war}"/>
            <zipfileset dir="${build.lib}" prefix="build_lib"/>
            <zipfileset dir="${svnSrcDir}/src" prefix="servlet/src"/>
            <zipfileset dir="${svnSrcDir}/web" prefix="servlet/web"/>
            <zipfileset dir="${svnSrcDir}/../supplemental" prefix="supplemental"/>
            <zipfileset dir="${javaDocOutput}/." prefix="javadoc"/>
        </zip>
    </target>
</project>
